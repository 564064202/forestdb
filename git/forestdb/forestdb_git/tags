!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASCIILINESZ	utils/iniparser.c	/^#define ASCIILINESZ /;"	d	file:
BCACHE	Makefile	/^BCACHE = src\/blockcache.o utils\/debug.o \\$/;"	m
BCACHETEST	Makefile	/^BCACHETEST = tests\/bcache_test.o $(FILEMGR)$/;"	m
BCACHE_CLEAN	src/blockcache.h	/^    BCACHE_CLEAN,$/;"	e	enum:__anon17
BCACHE_DIRTY	src/blockcache.c	/^#define BCACHE_DIRTY /;"	d	file:
BCACHE_DIRTY	src/blockcache.h	/^    BCACHE_DIRTY$/;"	e	enum:__anon17
BCACHE_FLUSH_UNIT	option/option.h	/^#define BCACHE_FLUSH_UNIT /;"	d
BCACHE_FREE	src/blockcache.c	/^#define BCACHE_FREE /;"	d	file:
BCACHE_NBUCKET	option/option.h	/^#define BCACHE_NBUCKET /;"	d
BCACHE_NDICBUCKET	option/option.h	/^#define BCACHE_NDICBUCKET /;"	d
BDR_RNG_GET_INT	utils/adv_random.h	/^#define BDR_RNG_GET_INT(/;"	d
BDR_RNG_GET_INT_PAIR	utils/adv_random.h	/^#define BDR_RNG_GET_INT_PAIR(/;"	d
BDR_RNG_NEXT	utils/adv_random.h	/^#define BDR_RNG_NEXT /;"	d
BDR_RNG_NEXTPAIR	utils/adv_random.h	/^#define BDR_RNG_NEXTPAIR /;"	d
BDR_RNG_VARS	utils/adv_random.h	/^#define BDR_RNG_VARS /;"	d
BDR_RNG_VARS_SET	utils/adv_random.h	/^#define BDR_RNG_VARS_SET(/;"	d
BENCH	Makefile	/^BENCH = \\$/;"	m
BLK_DBHEADER_SIZE	src/common.h	/^#define BLK_DBHEADER_SIZE /;"	d
BLK_MARKER_BNODE	src/common.h	/^#define BLK_MARKER_BNODE /;"	d
BLK_MARKER_DBHEADER	src/common.h	/^#define BLK_MARKER_DBHEADER /;"	d
BLK_MARKER_DOC	src/common.h	/^#define BLK_MARKER_DOC /;"	d
BLK_MARKER_SIZE	src/common.h	/^#define BLK_MARKER_SIZE /;"	d
BLK_NOT_FOUND	src/common.h	/^#define BLK_NOT_FOUND /;"	d
BNODE_MASK_METADATA	src/btree.h	/^#define BNODE_MASK_METADATA /;"	d
BNODE_MASK_ROOT	src/btree.h	/^#define BNODE_MASK_ROOT /;"	d
BNODE_MASK_SEQTREE	src/btree.h	/^#define BNODE_MASK_SEQTREE /;"	d
BTREE	Makefile	/^BTREE = src\/btree.o src\/btree_kv.o $(MEMLEAK)$/;"	m
BTREEBLK_CACHE_LIMIT	option/option.h	/^    #define BTREEBLK_CACHE_LIMIT /;"	d
BTREEBLOCK	Makefile	/^BTREEBLOCK = src\/btreeblock.o utils\/debug.o \\$/;"	m
BTREEBLOCKTEST	Makefile	/^BTREEBLOCKTEST = tests\/btreeblock_test.o$/;"	m
BTREE_BLK_NOT_FOUND	src/btree.h	/^#define BTREE_BLK_NOT_FOUND /;"	d
BTREE_CRC_OFFSET	option/option.h	/^    #define BTREE_CRC_OFFSET /;"	d
BTREE_CRC_OFFSET	option/option.h	/^    #undef BTREE_CRC_OFFSET$/;"	d
BTREE_IDX_NOT_FOUND	src/btree.h	/^    #define BTREE_IDX_NOT_FOUND /;"	d
BTREE_RESULT_FAIL	src/btree.h	/^    BTREE_RESULT_FAIL$/;"	e	enum:__anon18
BTREE_RESULT_SUCCESS	src/btree.h	/^    BTREE_RESULT_SUCCESS,$/;"	e	enum:__anon18
BTREE_RESULT_UPDATE	src/btree.h	/^    BTREE_RESULT_UPDATE,$/;"	e	enum:__anon18
BUF_MAXLEN	couchstore_api/couchstore_api_leveldb.c	/^#define BUF_MAXLEN /;"	d	file:
CFLAGS	Makefile	/^CFLAGS = \\$/;"	m
CHK_POW2	src/mempool.c	/^#define CHK_POW2(/;"	d	file:
CHK_POW2	utils/bitwise_utils.h	/^#define CHK_POW2(/;"	d
COMPRESS_DOC_BODIES	couchstore_api/couch_db.h	/^        COMPRESS_DOC_BODIES = 1$/;"	e	enum:__anon4
COUCHBENCH	Makefile	/^COUCHBENCH = couchstore_api\/couchstore_bench.o utils\/stopwatch.o utils\/iniparser.o \\$/;"	m
COUCHSTORE_COMPACT_FLAG_DROP_DELETES	couchstore_api/couch_db.h	/^        COUCHSTORE_COMPACT_FLAG_DROP_DELETES = 1$/;"	e	enum:__anon7
COUCHSTORE_COUCH_DB_H	couchstore_api/couch_db.h	/^#define COUCHSTORE_COUCH_DB_H$/;"	d
COUCHSTORE_DELETES_ONLY	couchstore_api/couch_db.h	/^        COUCHSTORE_DELETES_ONLY = 2,$/;"	e	enum:__anon6
COUCHSTORE_ERROR_ALLOC_FAIL	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_ALLOC_FAIL = -3,$/;"	e	enum:__anon15
COUCHSTORE_ERROR_CANCEL	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_CANCEL = -12$/;"	e	enum:__anon15
COUCHSTORE_ERROR_CHECKSUM_FAIL	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_CHECKSUM_FAIL = -9,$/;"	e	enum:__anon15
COUCHSTORE_ERROR_CORRUPT	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_CORRUPT = -2,$/;"	e	enum:__anon15
COUCHSTORE_ERROR_DOC_NOT_FOUND	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_DOC_NOT_FOUND = -5,$/;"	e	enum:__anon15
COUCHSTORE_ERROR_HEADER_VERSION	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_HEADER_VERSION = -8,$/;"	e	enum:__anon15
COUCHSTORE_ERROR_INVALID_ARGUMENTS	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_INVALID_ARGUMENTS = -10,$/;"	e	enum:__anon15
COUCHSTORE_ERROR_NO_HEADER	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_NO_HEADER = -6,$/;"	e	enum:__anon15
COUCHSTORE_ERROR_NO_SUCH_FILE	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_NO_SUCH_FILE = -11,$/;"	e	enum:__anon15
COUCHSTORE_ERROR_OPEN_FILE	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_OPEN_FILE = -1,$/;"	e	enum:__anon15
COUCHSTORE_ERROR_READ	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_READ = -4,$/;"	e	enum:__anon15
COUCHSTORE_ERROR_WRITE	include/libcouchstore/error.h	/^        COUCHSTORE_ERROR_WRITE = -7,$/;"	e	enum:__anon15
COUCHSTORE_NO_DELETES	couchstore_api/couch_db.h	/^        COUCHSTORE_NO_DELETES = 4$/;"	e	enum:__anon6
COUCHSTORE_OPEN_FLAG_CREATE	couchstore_api/couch_db.h	/^        COUCHSTORE_OPEN_FLAG_CREATE = 1,$/;"	e	enum:__anon3
COUCHSTORE_OPEN_FLAG_RDONLY	couchstore_api/couch_db.h	/^        COUCHSTORE_OPEN_FLAG_RDONLY = 2$/;"	e	enum:__anon3
COUCHSTORE_SUCCESS	include/libcouchstore/error.h	/^        COUCHSTORE_SUCCESS = 0,$/;"	e	enum:__anon15
COUCH_COMMON_H	couchstore_api/couch_common.h	/^#define COUCH_COMMON_H$/;"	d
COUCH_DOC_INVALID_JSON	couchstore_api/couch_common.h	/^        COUCH_DOC_INVALID_JSON = 1, \/**< Document was checked, and was not valid JSON *\/$/;"	e	enum:__anon1
COUCH_DOC_INVALID_JSON_KEY	couchstore_api/couch_common.h	/^        COUCH_DOC_INVALID_JSON_KEY = 2, \/**< Document was checked, and contained reserved keys,$/;"	e	enum:__anon1
COUCH_DOC_IS_COMPRESSED	couchstore_api/couch_common.h	/^        COUCH_DOC_IS_COMPRESSED = 128,  \/**< Document contents compressed via Snappy *\/$/;"	e	enum:__anon1
COUCH_DOC_IS_JSON	couchstore_api/couch_common.h	/^        COUCH_DOC_IS_JSON = 0,      \/**< Document is valid JSON data *\/$/;"	e	enum:__anon1
COUCH_DOC_NON_JSON_MODE	couchstore_api/couch_common.h	/^        COUCH_DOC_NON_JSON_MODE = 3 \/**< Document was not checked (DB running in non-JSON mode) *\/$/;"	e	enum:__anon1
CRC32	Makefile	/^CRC32 = utils\/crc32.o $(MEMLEAK)$/;"	m
CRCTEST	Makefile	/^CRCTEST = tests\/crc_test.o $(CRC32) src\/hash_functions.o$/;"	m
DBG	couchstore_api/couchstore_bench.c	/^    #define DBG(/;"	d	file:
DBG	couchstore_api/couchstore_bench.c	/^    #undef DBG$/;"	d	file:
DBG	src/blockcache.c	/^    #define DBG(/;"	d	file:
DBG	src/blockcache.c	/^    #undef DBG$/;"	d	file:
DBG	src/btree.c	/^    #define DBG(/;"	d	file:
DBG	src/btree.c	/^    #undef DBG$/;"	d	file:
DBG	src/btreeblock.c	/^    #define DBG(/;"	d	file:
DBG	src/btreeblock.c	/^    #undef DBG$/;"	d	file:
DBG	src/filemgr.c	/^    #define DBG(/;"	d	file:
DBG	src/filemgr.c	/^    #undef DBG$/;"	d	file:
DBG	src/forestdb.c	/^    #define DBG(/;"	d	file:
DBG	src/forestdb.c	/^    #undef DBG$/;"	d	file:
DBG	src/hbtrie.c	/^    #define DBG(/;"	d	file:
DBG	src/hbtrie.c	/^    #undef DBG$/;"	d	file:
DBG	src/iterator.c	/^    #define DBG(/;"	d	file:
DBG	src/iterator.c	/^    #undef DBG$/;"	d	file:
DBG	src/mempool.c	/^    #define DBG(/;"	d	file:
DBG	src/mempool.c	/^    #undef DBG$/;"	d	file:
DBG	src/wal.c	/^    #define DBG(/;"	d	file:
DBG	src/wal.c	/^    #undef DBG$/;"	d	file:
DBG	utils/debug.h	/^    #define DBG(/;"	d
DBG	utils/memleak.c	/^    #define DBG(/;"	d	file:
DBGCMD	couchstore_api/couchstore_bench.c	/^    #define DBGCMD(/;"	d	file:
DBGCMD	couchstore_api/couchstore_bench.c	/^    #undef DBGCMD$/;"	d	file:
DBGCMD	src/blockcache.c	/^    #define DBGCMD(/;"	d	file:
DBGCMD	src/blockcache.c	/^    #undef DBGCMD$/;"	d	file:
DBGCMD	src/btree.c	/^    #define DBGCMD(/;"	d	file:
DBGCMD	src/btree.c	/^    #undef DBGCMD$/;"	d	file:
DBGCMD	src/btreeblock.c	/^    #define DBGCMD(/;"	d	file:
DBGCMD	src/btreeblock.c	/^    #undef DBGCMD$/;"	d	file:
DBGCMD	src/filemgr.c	/^    #define DBGCMD(/;"	d	file:
DBGCMD	src/filemgr.c	/^    #undef DBGCMD$/;"	d	file:
DBGCMD	src/forestdb.c	/^    #define DBGCMD(/;"	d	file:
DBGCMD	src/forestdb.c	/^    #undef DBGCMD$/;"	d	file:
DBGCMD	src/hbtrie.c	/^    #define DBGCMD(/;"	d	file:
DBGCMD	src/hbtrie.c	/^    #undef DBGCMD$/;"	d	file:
DBGCMD	src/iterator.c	/^    #define DBGCMD(/;"	d	file:
DBGCMD	src/iterator.c	/^    #undef DBGCMD$/;"	d	file:
DBGCMD	src/mempool.c	/^    #define DBGCMD(/;"	d	file:
DBGCMD	src/mempool.c	/^    #undef DBGCMD$/;"	d	file:
DBGCMD	src/wal.c	/^    #define DBGCMD(/;"	d	file:
DBGCMD	src/wal.c	/^    #undef DBGCMD$/;"	d	file:
DBGCMD	utils/debug.h	/^    #define DBGCMD(/;"	d
DBGSW	couchstore_api/couchstore_bench.c	/^    #define DBGSW(/;"	d	file:
DBGSW	couchstore_api/couchstore_bench.c	/^    #undef DBGSW$/;"	d	file:
DBGSW	src/blockcache.c	/^    #define DBGSW(/;"	d	file:
DBGSW	src/blockcache.c	/^    #undef DBGSW$/;"	d	file:
DBGSW	src/btree.c	/^    #define DBGSW(/;"	d	file:
DBGSW	src/btree.c	/^    #undef DBGSW$/;"	d	file:
DBGSW	src/btreeblock.c	/^    #define DBGSW(/;"	d	file:
DBGSW	src/btreeblock.c	/^    #undef DBGSW$/;"	d	file:
DBGSW	src/filemgr.c	/^    #define DBGSW(/;"	d	file:
DBGSW	src/filemgr.c	/^    #undef DBGSW$/;"	d	file:
DBGSW	src/forestdb.c	/^    #define DBGSW(/;"	d	file:
DBGSW	src/forestdb.c	/^    #undef DBGSW$/;"	d	file:
DBGSW	src/hbtrie.c	/^    #define DBGSW(/;"	d	file:
DBGSW	src/hbtrie.c	/^    #undef DBGSW$/;"	d	file:
DBGSW	src/iterator.c	/^    #define DBGSW(/;"	d	file:
DBGSW	src/iterator.c	/^    #undef DBGSW$/;"	d	file:
DBGSW	src/mempool.c	/^    #define DBGSW(/;"	d	file:
DBGSW	src/mempool.c	/^    #undef DBGSW$/;"	d	file:
DBGSW	src/wal.c	/^    #define DBGSW(/;"	d	file:
DBGSW	src/wal.c	/^    #undef DBGSW$/;"	d	file:
DBGSW	utils/debug.h	/^    #define DBGSW(/;"	d
DECOMPRESS_DOC_BODIES	couchstore_api/couch_db.h	/^        DECOMPRESS_DOC_BODIES = 1$/;"	e	enum:__anon5
DICTMINSZ	utils/iniparser.c	/^#define DICTMINSZ /;"	d	file:
DICT_INVALID_KEY	utils/iniparser.c	/^#define DICT_INVALID_KEY /;"	d	file:
DOCIO	Makefile	/^DOCIO = src\/docio.o $(FILEMGR) $(CRC32) $(MEMLEAK)$/;"	m
DOCIOTEST	Makefile	/^DOCIOTEST = tests\/docio_test.o$/;"	m
DOCIO_CHECK_ALIGN	src/docio.c	/^    DOCIO_CHECK_ALIGN$/;"	e	enum:__anon20	file:
DOCIO_SIMPLY_APPEND	src/docio.c	/^    DOCIO_SIMPLY_APPEND,$/;"	e	enum:__anon20	file:
DOC_INFO_INITIALIZER	couchstore_api/couch_common.h	/^#define DOC_INFO_INITIALIZER /;"	d
Db	couchstore_api/couch_common.h	/^    typedef struct _db Db;$/;"	t	typeref:struct:_db
DbInfo	couchstore_api/couch_common.h	/^    } DbInfo;$/;"	t	typeref:struct:__anon2
Doc	couchstore_api/couch_common.h	/^    } Doc;$/;"	t	typeref:struct:_doc
DocInfo	couchstore_api/couch_common.h	/^    } DocInfo;$/;"	t	typeref:struct:_docinfo
FDB	Makefile	/^FDB = \\$/;"	m
FDBTEST	Makefile	/^FDBTEST = tests\/forestdb_test.o $(MEMLEAK)$/;"	m
FDB_BLOCKSIZE	option/option.h	/^#define FDB_BLOCKSIZE /;"	d
FDB_COUCH	Makefile	/^FDB_COUCH = $(FDB) couchstore_api\/couchstore_api.o$/;"	m
FDB_DRB_ASYNC	include/forestdb.h	/^    FDB_DRB_ASYNC = 0x2,$/;"	e	enum:__anon10
FDB_DRB_NONE	include/forestdb.h	/^    FDB_DRB_NONE = 0x0,$/;"	e	enum:__anon10
FDB_DRB_ODIRECT	include/forestdb.h	/^    FDB_DRB_ODIRECT = 0x1,$/;"	e	enum:__anon10
FDB_DRB_ODIRECT_ASYNC	include/forestdb.h	/^    FDB_DRB_ODIRECT_ASYNC = 0x3$/;"	e	enum:__anon10
FDB_ITR_METAONLY	include/forestdb.h	/^    FDB_ITR_METAONLY = 0x1,$/;"	e	enum:__anon13
FDB_ITR_NONE	include/forestdb.h	/^    FDB_ITR_NONE = 0x0,$/;"	e	enum:__anon13
FDB_MAX_KEYLEN	option/option.h	/^#define FDB_MAX_KEYLEN /;"	d
FDB_RESULT_FAIL	include/forestdb.h	/^    FDB_RESULT_FAIL,$/;"	e	enum:__anon8
FDB_RESULT_INVALID_ARGS	include/forestdb.h	/^    FDB_RESULT_INVALID_ARGS$/;"	e	enum:__anon8
FDB_RESULT_SUCCESS	include/forestdb.h	/^    FDB_RESULT_SUCCESS,$/;"	e	enum:__anon8
FDB_SECTOR_SIZE	option/option.h	/^#define FDB_SECTOR_SIZE /;"	d
FDB_SEQTREE_NOT_USE	include/forestdb.h	/^    FDB_SEQTREE_NOT_USE = 0,$/;"	e	enum:__anon9
FDB_SEQTREE_USE	include/forestdb.h	/^    FDB_SEQTREE_USE = 1$/;"	e	enum:__anon9
FDB_WAL_CLEAN	src/wal.h	/^    FDB_WAL_CLEAN = 0,$/;"	e	enum:__anon24
FDB_WAL_DIRTY	src/wal.h	/^    FDB_WAL_DIRTY = 1,$/;"	e	enum:__anon24
FDB_WAL_NBUCKET	option/option.h	/^#define FDB_WAL_NBUCKET /;"	d
FDB_WAL_PENDING	src/wal.h	/^    FDB_WAL_PENDING = 2$/;"	e	enum:__anon24
FDB_WAL_THRESHOLD	option/option.h	/^#define FDB_WAL_THRESHOLD /;"	d
FILEMGR	Makefile	/^FILEMGR = src\/filemgr.o src\/filemgr_ops_linux.o utils\/debug.o \\$/;"	m
FILEMGRTEST	Makefile	/^FILEMGRTEST = tests\/filemgr_test.o$/;"	m
FILEMGR_BULK_READ	option/option.h	/^#define FILEMGR_BULK_READ /;"	d
FILEMGR_MAGIC	src/filemgr.c	/^#define FILEMGR_MAGIC /;"	d	file:
FILENAME	tests/forestdb_test.c	/^#define FILENAME /;"	d	file:
FILE_CLOSED	src/common.h	/^    FILE_CLOSED = 4,$/;"	e	enum:__anon19
FILE_COMPACT_NEW	src/common.h	/^    FILE_COMPACT_NEW = 3,$/;"	e	enum:__anon19
FILE_COMPACT_OLD	src/common.h	/^    FILE_COMPACT_OLD = 2,$/;"	e	enum:__anon19
FILE_COMPACT_OLD_SCAN	src/common.h	/^    FILE_COMPACT_OLD_SCAN = 1,$/;"	e	enum:__anon19
FILE_NORMAL	src/common.h	/^    FILE_NORMAL = 0,$/;"	e	enum:__anon19
FILE_REMOVED_PENDING	src/common.h	/^    FILE_REMOVED_PENDING = 5,$/;"	e	enum:__anon19
FREE_VAL	utils/memleak.c	/^#define FREE_VAL /;"	d	file:
HASH	Makefile	/^HASH = src\/hash.o src\/hash_functions.o $(LIST) $(RBTREE) $(MEMLEAK)$/;"	m
HASHTEST	Makefile	/^HASHTEST = tests\/hash_test.o$/;"	m
HBTRIE	Makefile	/^HBTRIE = src\/hbtrie.o $(BTREE) $(DOCIO) $(BTREEBLOCK) \\$/;"	m
HBTRIETEST	Makefile	/^HBTRIETEST = tests\/hbtrie_test.o$/;"	m
HBTRIE_EOK	src/hbtrie.c	/^#define HBTRIE_EOK /;"	d	file:
HBTRIE_MAX_KEYLEN	src/hbtrie.h	/^#define HBTRIE_MAX_KEYLEN /;"	d
HBTRIE_RESULT_FAIL	src/hbtrie.h	/^    HBTRIE_RESULT_FAIL$/;"	e	enum:__anon21
HBTRIE_RESULT_SUCCESS	src/hbtrie.h	/^    HBTRIE_RESULT_SUCCESS,$/;"	e	enum:__anon21
HBTRIE_RESULT_UPDATE	src/hbtrie.h	/^    HBTRIE_RESULT_UPDATE,$/;"	e	enum:__anon21
IDX_DIGIT	tests/forestdb_test.c	/^#define IDX_DIGIT /;"	d	file:
IDX_DIGIT_STR	tests/forestdb_test.c	/^#define IDX_DIGIT_STR /;"	d	file:
IFDEF_LOCK	src/hash.c	/^    #define IFDEF_LOCK(/;"	d	file:
IFDEF_LOCK	src/list.c	/^    #define IFDEF_LOCK(/;"	d	file:
INIT_VAL	utils/memleak.c	/^#define INIT_VAL /;"	d	file:
INI_INVALID_KEY	utils/iniparser.c	/^#define INI_INVALID_KEY /;"	d	file:
INLINE	src/arch.h	/^    #define INLINE /;"	d
KSIZE	tests/forestdb_test.c	/^#define KSIZE /;"	d	file:
LDFLAGS	Makefile	/^LDFLAGS = -lpthread -lm$/;"	m
LD_LIBRARY_PATH	Makefile	/^	LD_LIBRARY_PATH=.\/ .\/couchstore_api\/couchbench_fdb$/;"	m
LD_LIBRARY_PATH	Makefile	/^	LD_LIBRARY_PATH=.\/ .\/forestdb_test$/;"	m
LEVELDB_COUCH	Makefile	/^LEVELDB_COUCH = couchstore_api\/couchstore_api_leveldb.o$/;"	m
LIBCOUCHSTORE	Makefile	/^LIBCOUCHSTORE=$(LIBDIR)\/libcouchstore.so.1$/;"	m
LIBCOUCHSTORE_API	include/libcouchstore/visibility.h	/^#define LIBCOUCHSTORE_API /;"	d
LIBCOUCHSTORE_API	include/libcouchstore/visibility.h	/^#define LIBCOUCHSTORE_API$/;"	d
LIBCOUCHSTORE_ERROR_H	include/libcouchstore/error.h	/^#define LIBCOUCHSTORE_ERROR_H /;"	d
LIBCOUCHSTORE_FILE_OPS_H	include/libcouchstore/file_ops.h	/^#define LIBCOUCHSTORE_FILE_OPS_H$/;"	d
LIBCOUCHSTORE_VISIBILITY_H	include/libcouchstore/visibility.h	/^#define LIBCOUCHSTORE_VISIBILITY_H$/;"	d
LIBDIR	Makefile	/^LIBDIR=.\/couchstore_api\/libs\/$/;"	m
LIBLEVELDB	Makefile	/^LIBLEVELDB=$(LIBDIR)\/libleveldb.so$/;"	m
LIBRARY	Makefile	/^LIBRARY=forestdb$/;"	m
LIST	Makefile	/^LIST = src\/list.o$/;"	m
LISTTEST	Makefile	/^LISTTEST = tests\/list_test.o$/;"	m
LocalDoc	couchstore_api/couch_common.h	/^    } LocalDoc;$/;"	t	typeref:struct:_local_doc
MAX	utils/bitwise_utils.h	/^#define MAX(/;"	d
MAXSIZE	src/mempool.c	/^#define MAXSIZE /;"	d	file:
MAXVALSZ	utils/iniparser.c	/^#define MAXVALSZ /;"	d	file:
MEMLEAK	Makefile	/^MEMLEAK = utils\/memleak.o $(RBTREE)$/;"	m
MEMPOOL	Makefile	/^MEMPOOL = src\/mempool.o $(LIST) $(MEMLEAK)$/;"	m
MEMPOOLTEST	Makefile	/^MEMPOOLTEST = tests\/mempool_test.o$/;"	m
METASIZE_ALIGN_UNIT	src/btree.c	/^#define METASIZE_ALIGN_UNIT /;"	d	file:
META_BUF_MAXLEN	couchstore_api/couchstore_api.c	/^#define META_BUF_MAXLEN /;"	d	file:
MIN	couchstore_api/couchstore_bench.c	/^#define MIN(/;"	d	file:
MIN	utils/bitwise_utils.h	/^#define MIN(/;"	d
MIN	utils/crc32.c	/^#define MIN(/;"	d	file:
MINSIZE	src/mempool.c	/^#define MINSIZE /;"	d	file:
MUTEX_INITIALIZER	src/arch.h	/^        #define MUTEX_INITIALIZER /;"	d
NBUCKET	src/filemgr.c	/^#define NBUCKET /;"	d	file:
NCORES	tests/forestdb_test.c	/^#define NCORES /;"	d	file:
N_DBG_SWITCH	utils/debug.c	/^#define N_DBG_SWITCH /;"	d	file:
N_INIT_ITEMS	src/mempool.c	/^#define N_INIT_ITEMS /;"	d	file:
N_LISTS	src/mempool.c	/^#define N_LISTS /;"	d	file:
PRINT_TIME	couchstore_api/couchstore_bench.c	/^#define PRINT_TIME(/;"	d	file:
PROGRAMS	Makefile	/^PROGRAMS = \\$/;"	m
RANGES	couchstore_api/couch_db.h	/^        RANGES = 1,$/;"	e	enum:__anon6
RBTREE	Makefile	/^RBTREE = src\/rbtree.o src\/rbwrap.o$/;"	m
RB_BLACK	src/rbtree.h	/^#define	RB_BLACK	/;"	d
RB_CLEAR_NODE	src/rbtree.h	/^#define RB_CLEAR_NODE(/;"	d
RB_EMPTY_NODE	src/rbtree.h	/^#define RB_EMPTY_NODE(/;"	d
RB_EMPTY_ROOT	src/rbtree.h	/^#define RB_EMPTY_ROOT(/;"	d
RB_RED	src/rbtree.h	/^#define	RB_RED	/;"	d
RB_ROOT	src/rbtree.h	/^#define RB_ROOT	/;"	d
RND_NORMAL	utils/adv_random.h	/^    RND_NORMAL$/;"	e	enum:__anon25
RND_UNIFORM	utils/adv_random.h	/^    RND_UNIFORM,$/;"	e	enum:__anon25
SEQNUM_NOT_USED	option/option.h	/^#define SEQNUM_NOT_USED /;"	d
SEQTREE	src/forestdb.c	/^    #define SEQTREE(/;"	d	file:
SEQTREE	src/wal.c	/^    #define SEQTREE(/;"	d	file:
SET_DOC_RANGE	couchstore_api/couchstore_bench.c	/^#define SET_DOC_RANGE(/;"	d	file:
SIZE_THRES1	src/mempool.c	/^#define SIZE_THRES1 /;"	d	file:
SIZE_THRES2	src/mempool.c	/^#define SIZE_THRES2 /;"	d	file:
SPACE_LIMIT_FOR_LIST	src/mempool.c	/^#define SPACE_LIMIT_FOR_LIST /;"	d	file:
SPIN_INITIALIZER	src/arch.h	/^        #define SPIN_INITIALIZER /;"	d
TEST_CHK	tests/test.h	/^#define TEST_CHK(/;"	d
TEST_INIT	tests/test.h	/^#define TEST_INIT(/;"	d
TEST_RESULT	tests/test.h	/^#define TEST_RESULT(/;"	d
TEST_TIME	tests/test.h	/^#define TEST_TIME(/;"	d
UINT64_MAX	utils/adv_random.h	/^#define UINT64_MAX /;"	d
VSIZE	tests/forestdb_test.c	/^#define VSIZE /;"	d	file:
WAL	Makefile	/^WAL = src\/wal.o $(HASH) $(MEMLEAK)$/;"	m
WAL_ACT_INSERT	src/wal.h	/^    WAL_ACT_INSERT,$/;"	e	enum:__anon23
WAL_ACT_REMOVE	src/wal.h	/^    WAL_ACT_REMOVE,$/;"	e	enum:__anon23
WAL_ACT_UPDATE	src/wal.h	/^	WAL_ACT_UPDATE$/;"	e	enum:__anon23
WAL_FLAG_INITIALIZED	src/wal.h	/^#define WAL_FLAG_INITIALIZED /;"	d
WAL_RESULT_FAIL	src/wal.h	/^    WAL_RESULT_FAIL$/;"	e	enum:__anon22
WAL_RESULT_SUCCESS	src/wal.h	/^    WAL_RESULT_SUCCESS,$/;"	e	enum:__anon22
_32_M	utils/bitwise_utils.h	/^#define _32_M /;"	d
_32_SC	utils/bitwise_utils.h	/^#define _32_SC(/;"	d
_32_SM	utils/bitwise_utils.h	/^#define _32_SM /;"	d
_64_SC	utils/bitwise_utils.h	/^#define _64_SC(/;"	d
_64_SC_32	utils/bitwise_utils.h	/^#define _64_SC_32(/;"	d
_64_SM	utils/bitwise_utils.h	/^#define _64_SM /;"	d
_ARCH_O_DIRECT	src/arch.h	/^    #define _ARCH_O_DIRECT /;"	d
_CMP_U32	utils/bitwise_utils.h	/^#define _CMP_U32(/;"	d
_CMP_U32_P	utils/bitwise_utils.h	/^#define _CMP_U32_P(/;"	d
_CMP_U64	utils/bitwise_utils.h	/^#define _CMP_U64(/;"	d
_CMP_U64_P	utils/bitwise_utils.h	/^#define _CMP_U64_P(/;"	d
_CS	utils/bitwise_utils.h	/^#define _CS(/;"	d
_CSB	utils/bitwise_utils.h	/^#define _CSB(/;"	d
_F64	src/arch.h	/^    #define _F64 /;"	d
_FSEC	src/arch.h	/^    #define _FSEC /;"	d
_FUSEC	src/arch.h	/^    #define _FUSEC /;"	d
_HASH_RBTREE	src/hash.h	/^#define _HASH_RBTREE$/;"	d
_INIPARSER_H_	utils/iniparser.h	/^#define _INIPARSER_H_$/;"	d
_JSAHN_ADV_RANDOM_H	utils/adv_random.h	/^#define _JSAHN_ADV_RANDOM_H$/;"	d
_JSAHN_ARCH_H	src/arch.h	/^#define _JSAHN_ARCH_H$/;"	d
_JSAHN_BITWISE_UTILS_H	utils/bitwise_utils.h	/^#define _JSAHN_BITWISE_UTILS_H$/;"	d
_JSAHN_BLOCKCACHE_H	src/blockcache.h	/^#define _JSAHN_BLOCKCACHE_H$/;"	d
_JSAHN_BTREEBLOCK_H	src/btreeblock.h	/^#define _JSAHN_BTREEBLOCK_H$/;"	d
_JSAHN_BTREE_H	src/btree.h	/^#define _JSAHN_BTREE_H$/;"	d
_JSAHN_BTREE_KV_H	src/btree_kv.h	/^#define _JSAHN_BTREE_KV_H$/;"	d
_JSAHN_COMMON_H	src/common.h	/^#define _JSAHN_COMMON_H$/;"	d
_JSAHN_CRC32_H	utils/crc32.h	/^#define _JSAHN_CRC32_H$/;"	d
_JSAHN_DEBUG_H	utils/debug.h	/^#define _JSAHN_DEBUG_H$/;"	d
_JSAHN_DOCIO_H	src/docio.h	/^#define _JSAHN_DOCIO_H$/;"	d
_JSAHN_FDB_H	include/forestdb.h	/^#define _JSAHN_FDB_H$/;"	d
_JSAHN_FILEMGR_H	src/filemgr.h	/^#define _JSAHN_FILEMGR_H$/;"	d
_JSAHN_FILEMGR_OPS_LINUX	src/filemgr_ops_linux.h	/^#define _JSAHN_FILEMGR_OPS_LINUX$/;"	d
_JSAHN_HASH_FUNCTIONS_H	src/hash_functions.h	/^#define _JSAHN_HASH_FUNCTIONS_H$/;"	d
_JSAHN_HASH_H	src/hash.h	/^#define _JSAHN_HASH_H$/;"	d
_JSAHN_HBTRIE_H	src/hbtrie.h	/^#define _JSAHN_HBTRIE_H$/;"	d
_JSAHN_LIST_H	src/list.h	/^#define _JSAHN_LIST_H$/;"	d
_JSAHN_MEMLEAK_H	utils/memleak.h	/^#define _JSAHN_MEMLEAK_H$/;"	d
_JSAHN_MEMPOOL_H	src/mempool.h	/^#define _JSAHN_MEMPOOL_H$/;"	d
_JSAHN_OPTION_H	option/option.h	/^#define _JSAHN_OPTION_H$/;"	d
_JSAHN_STOPWATCH_H	utils/stopwatch.h	/^#define _JSAHN_STOPWATCH_H$/;"	d
_JSAHN_TEST_H	tests/test.h	/^#define _JSAHN_TEST_H$/;"	d
_JSAHN_TIME_UTILS_H	utils/time_utils.h	/^#define _JSAHN_TIME_UTILS_H$/;"	d
_JSAHN_WAL_H	src/wal.h	/^#define _JSAHN_WAL_H$/;"	d
_LINUX_RBTREE_H	src/rbtree.h	/^#define	_LINUX_RBTREE_H$/;"	d
_MALLOC_OVERRIDE	utils/memleak.c	/^#define _MALLOC_OVERRIDE$/;"	d	file:
_MALLOC_OVERRIDE	utils/memleak.h	/^    #define _MALLOC_OVERRIDE$/;"	d
_MALLOC_OVERRIDE	utils/memleak.h	/^#define _MALLOC_OVERRIDE$/;"	d
_MAP	utils/bitwise_utils.h	/^#define _MAP(/;"	d
_MEMORY_OVERRIDE	src/common.h	/^#define _MEMORY_OVERRIDE$/;"	d
_MEMPOOL	src/mempool.h	/^#define _MEMPOOL$/;"	d
_NZ	utils/bitwise_utils.h	/^#define _NZ(/;"	d
_NZ_64	utils/bitwise_utils.h	/^#define _NZ_64(/;"	d
_RBTREE_WRAP	src/rbwrap.h	/^#define _RBTREE_WRAP$/;"	d
_TEST_GLOBAL	tests/test.h	/^#define _TEST_GLOBAL$/;"	d
_U32_V	utils/bitwise_utils.h	/^#define _U32_V(/;"	d
_U64_V	utils/bitwise_utils.h	/^#define _U64_V(/;"	d
__BIT_CMP	option/option.h	/^#define __BIT_CMP$/;"	d
__BTREEBLK_BLOCKPOOL	option/option.h	/^#define __BTREEBLK_BLOCKPOOL$/;"	d
__CRC32	option/option.h	/^#define __CRC32$/;"	d
__FDB_BCACHE_USE	option/option.h	/^#define __FDB_BCACHE_USE$/;"	d
__FDB_SEQTREE	option/option.h	/^#define __FDB_SEQTREE$/;"	d
__PI	utils/adv_random.h	/^static double __PI = 3.141592654;$/;"	v
__PRINT_IOSTAT	couchstore_api/couchstore_bench.c	/^    #define __PRINT_IOSTAT$/;"	d	file:
__UTREE_HEADER_SIZE	option/option.h	/^    #define __UTREE_HEADER_SIZE /;"	d
__WAL_FLUSH_BEFORE_COMMIT	option/option.h	/^#define __WAL_FLUSH_BEFORE_COMMIT$/;"	d
__WAL_KEY_COPY	option/option.h	/^#define __WAL_KEY_COPY$/;"	d
__ksize	src/btree.h	/^#define __ksize(/;"	d
__rb_erase_color	src/rbtree.c	/^static void __rb_erase_color(struct rb_node *node, struct rb_node *parent,$/;"	f	file:
__rb_rotate_left	src/rbtree.c	/^static void __rb_rotate_left(struct rb_node *node, struct rb_root *root)$/;"	f	file:
__rb_rotate_right	src/rbtree.c	/^static void __rb_rotate_right(struct rb_node *node, struct rb_root *root)$/;"	f	file:
__rbwrap_insert	src/rbwrap.c	/^struct rb_node * __rbwrap_insert(struct rb_root *root, struct rb_node *node, rbwrap_cmp_func *func)$/;"	f
__vsize	src/btree.h	/^#define __vsize(/;"	d
_add_blk_marker	src/docio.c	/^    #define _add_blk_marker(/;"	d	file:
_bcache_alloc_freeblock	src/blockcache.c	/^struct bcache_item *_bcache_alloc_freeblock()$/;"	f
_bcache_cmp	src/blockcache.c	/^INLINE int _bcache_cmp(struct hash_elem *a, struct hash_elem *b)$/;"	f
_bcache_evict	src/blockcache.c	/^struct list_elem * _bcache_evict(struct fnamedic_item *curfile)$/;"	f
_bcache_evict_dirty	src/blockcache.c	/^void _bcache_evict_dirty(struct fnamedic_item *fname_item, int sync)$/;"	f
_bcache_free_bcache_item	src/blockcache.c	/^INLINE void _bcache_free_bcache_item(struct hash_elem *h)$/;"	f
_bcache_free_fnamedic	src/blockcache.c	/^INLINE void _bcache_free_fnamedic(struct hash_elem *h)$/;"	f
_bcache_get_victim	src/blockcache.c	/^struct fnamedic_item *_bcache_get_victim()$/;"	f
_bcache_hash	src/blockcache.c	/^INLINE uint32_t _bcache_hash(struct hash *hash, struct hash_elem *e)$/;"	f
_bcache_move_fname_list	src/blockcache.c	/^void _bcache_move_fname_list(struct fnamedic_item *fname, struct list *list)$/;"	f
_bcache_release_freeblock	src/blockcache.c	/^void _bcache_release_freeblock(struct bcache_item *item)$/;"	f
_bid_to_value_64	src/btree_kv.c	/^INLINE void* _bid_to_value_64(bid_t *bid)$/;"	f
_bnode_size	src/btree.c	/^INLINE int _bnode_size($/;"	f
_bnode_size_check	src/btree.c	/^INLINE int _bnode_size_check($/;"	f
_btree_add_entry	src/btree.c	/^idx_t _btree_add_entry(struct btree *btree, struct bnode *node, void *key, void *value)$/;"	f
_btree_find_entry	src/btree.c	/^idx_t _btree_find_entry(struct btree *btree, struct bnode *node, void *key)$/;"	f
_btree_get_nsplitnode	src/btree.c	/^INLINE size_t _btree_get_nsplitnode(struct btree *btree, bid_t bid, struct bnode *node, size_t size)$/;"	f
_btree_init_node	src/btree.c	/^INLINE struct bnode * _btree_init_node($/;"	f
_btree_move_modified_node	src/btree.c	/^int _btree_move_modified_node($/;"	f
_btree_next	src/btree.c	/^btree_result _btree_next(struct btree_iterator *it, void *key_buf, void *value_buf, int depth)$/;"	f
_btree_print_node	src/btree.c	/^void _btree_print_node(struct btree *btree, int depth, bid_t bid, btree_print_func func)$/;"	f
_btree_remove_entry	src/btree.c	/^idx_t _btree_remove_entry(struct btree *btree, struct bnode *node, void *key)$/;"	f
_btree_split_node	src/btree.c	/^int _btree_split_node($/;"	f
_btreeblk_dump_recycle_bin	src/btreeblock.c	/^INLINE void _btreeblk_dump_recycle_bin(struct btreeblk_handle *handle, struct btreeblk_block *block)$/;"	f
_btreeblk_empty_recycle_bin	src/btreeblock.c	/^INLINE void _btreeblk_empty_recycle_bin(struct btreeblk_handle *handle)$/;"	f
_btreeblk_find_recycle_bin	src/btreeblock.c	/^INLINE struct btreeblk_block *_btreeblk_find_recycle_bin(struct btreeblk_handle *handle, bid_t bid)$/;"	f
_btreeblk_free_aligned_block	src/btreeblock.c	/^INLINE void _btreeblk_free_aligned_block($/;"	f
_btreeblk_free_dirty_block	src/btreeblock.c	/^INLINE void _btreeblk_free_dirty_block(struct btreeblk_handle *handle, struct btreeblk_block *block)$/;"	f
_btreeblk_get_aligned_block	src/btreeblock.c	/^INLINE void _btreeblk_get_aligned_block($/;"	f
_btreeblk_write_dirty_block	src/btreeblock.c	/^INLINE void _btreeblk_write_dirty_block(struct btreeblk_handle *handle, struct btreeblk_block *block)$/;"	f
_buf_to_docinfo	couchstore_api/couchstore_api.c	/^void _buf_to_docinfo(void *buf, size_t size, DocInfo *docinfo)$/;"	f
_buf_to_docinfo	couchstore_api/couchstore_api_leveldb.c	/^void _buf_to_docinfo(void *buf, size_t size, DocInfo *docinfo)$/;"	f
_cmp_binary32	src/btree_kv.c	/^INLINE int _cmp_binary32(void *key1, void *key2)$/;"	f
_cmp_binary64	src/btree_kv.c	/^INLINE int _cmp_binary64(void *key1, void *key2)$/;"	f
_cmp_char64	src/btree_kv.c	/^INLINE int _cmp_char64(void *key1, void *key2)$/;"	f
_cmp_docs	couchstore_api/couchstore_bench.c	/^int _cmp_docs(const void *a, const void *b)$/;"	f
_cmp_int32_t	src/btree_kv.c	/^INLINE int _cmp_int32_t(void *key1, void *key2)$/;"	f
_cmp_uint32_t	src/btree_kv.c	/^INLINE int _cmp_uint32_t(void *key1, void *key2)$/;"	f
_cmp_uint64_t	src/btree_kv.c	/^INLINE int _cmp_uint64_t(void *key1, void *key2)$/;"	f
_copy_kv	src/btree_kv.c	/^INLINE void _copy_kv($/;"	f
_crc2key	couchstore_api/couchstore_bench.c	/^void _crc2key(uint32_t crc, char *buf, size_t len)$/;"	f
_crc2keylen	couchstore_api/couchstore_bench.c	/^size_t _crc2keylen(struct bench_info *binfo, uint32_t crc)$/;"	f
_create_doc	couchstore_api/couchstore_bench.c	/^void _create_doc(struct bench_info *binfo, size_t idx, Doc **pdoc, DocInfo **pinfo)$/;"	f
_db	couchstore_api/couchstore_api.c	/^struct _db {$/;"	s	file:
_db	couchstore_api/couchstore_api_leveldb.c	/^struct _db {$/;"	s	file:
_dbg_get_addr	utils/debug.c	/^void * _dbg_get_addr(int n)$/;"	f
_dbg_get_uint64_t	utils/debug.c	/^uint64_t _dbg_get_uint64_t(int n)$/;"	f
_dbg_is_sw_set	utils/debug.c	/^int _dbg_is_sw_set(int n)$/;"	f
_dbg_set_addr	utils/debug.c	/^void _dbg_set_addr(int n, void *addr)$/;"	f
_dbg_set_uint64_t	utils/debug.c	/^void _dbg_set_uint64_t(int n, uint64_t val)$/;"	f
_dbg_sw_clear	utils/debug.c	/^void _dbg_sw_clear(int n)$/;"	f
_dbg_sw_set	utils/debug.c	/^void _dbg_sw_set(int n)$/;"	f
_dictionary_	utils/iniparser.h	/^typedef struct _dictionary_ {$/;"	s
_dirty	src/blockcache.c	/^static uint64_t _dirty = 0;$/;"	v	file:
_dirty_cmp	src/blockcache.c	/^INLINE int _dirty_cmp(struct rb_node *a, struct rb_node *b, void *aux)$/;"	f
_doc	couchstore_api/couch_common.h	/^    typedef struct _doc {$/;"	s
_docinfo	couchstore_api/couch_common.h	/^    typedef struct _docinfo {$/;"	s
_docinfo_to_buf	couchstore_api/couchstore_api.c	/^size_t _docinfo_to_buf(DocInfo *docinfo, void *buf)$/;"	f
_docinfo_to_buf	couchstore_api/couchstore_api_leveldb.c	/^size_t _docinfo_to_buf(DocInfo *docinfo, void *buf)$/;"	f
_docio_append_doc_component	src/docio.c	/^INLINE bid_t _docio_append_doc_component(struct docio_handle *handle, void *buf,$/;"	f
_docio_append_mode_t	src/docio.c	/^} _docio_append_mode_t;$/;"	t	typeref:enum:__anon20	file:
_docio_read_doc_component	src/docio.c	/^uint64_t _docio_read_doc_component(struct docio_handle *handle, uint64_t offset, uint32_t len, void *buf_out)$/;"	f
_docio_read_doc_component_comp	src/docio.c	/^uint64_t _docio_read_doc_component_comp(struct docio_handle *handle, uint64_t offset, uint32_t *len, void *buf_out)$/;"	f
_docio_read_length	src/docio.c	/^uint64_t _docio_read_length(struct docio_handle *handle, uint64_t offset, struct docio_length *length)$/;"	f
_docio_read_through_buffer	src/docio.c	/^INLINE void _docio_read_through_buffer(struct docio_handle *handle, bid_t bid)$/;"	f
_fdb_check_file_reopen	src/forestdb.c	/^void _fdb_check_file_reopen(fdb_handle *handle)$/;"	f
_fdb_cmp_uint64_t	src/forestdb.c	/^INLINE int _fdb_cmp_uint64_t(const void *key1, const void *key2)$/;"	f
_fdb_fetch_header	src/forestdb.c	/^INLINE void _fdb_fetch_header($/;"	f
_fdb_get_docsize	src/forestdb.c	/^INLINE size_t _fdb_get_docsize(struct docio_length len)$/;"	f
_fdb_keycmp	src/iterator.c	/^int _fdb_keycmp(void *key1, size_t keylen1, void *key2, size_t keylen2)$/;"	f
_fdb_readkey_wrap	src/forestdb.c	/^INLINE size_t _fdb_readkey_wrap(void *handle, uint64_t offset, void *buf)$/;"	f
_fdb_restore_wal	src/forestdb.c	/^INLINE void _fdb_restore_wal(fdb_handle *handle)$/;"	f
_fdb_set_file_header	src/forestdb.c	/^uint64_t _fdb_set_file_header(fdb_handle *handle)$/;"	f
_fdb_sync_db_header	src/forestdb.c	/^void _fdb_sync_db_header(fdb_handle *handle)$/;"	f
_fdb_wal_flush_func	src/forestdb.c	/^INLINE void _fdb_wal_flush_func(void *voidhandle, struct wal_item *item)$/;"	f
_fdb_wal_rb_cmp	src/iterator.c	/^int _fdb_wal_rb_cmp(struct rb_node *a, struct rb_node *b, void *aux)$/;"	f
_fetch_bnode	src/btree.c	/^INLINE struct bnode *_fetch_bnode(struct btree *btree, void *addr, uint16_t level)$/;"	f
_file_cmp	src/filemgr.c	/^int _file_cmp(struct hash_elem *a, struct hash_elem *b)$/;"	f
_file_hash	src/filemgr.c	/^uint32_t _file_hash(struct hash *hash, struct hash_elem *e)$/;"	f
_file_to_fname_query	src/blockcache.c	/^INLINE void _file_to_fname_query(struct filemgr *file, struct fnamedic_item *fname)$/;"	f
_filemgr_crc32_check	src/filemgr.c	/^INLINE void _filemgr_crc32_check(struct filemgr *file, void *buf)$/;"	f
_filemgr_free_func	src/filemgr.c	/^void _filemgr_free_func(struct hash_elem *h)$/;"	f
_filemgr_get_temp_buf	src/filemgr.c	/^void * _filemgr_get_temp_buf()$/;"	f
_filemgr_linux_close	src/filemgr_ops_linux.c	/^int _filemgr_linux_close(int fd)$/;"	f
_filemgr_linux_fdatasync	src/filemgr_ops_linux.c	/^int _filemgr_linux_fdatasync(int fd)$/;"	f
_filemgr_linux_fsync	src/filemgr_ops_linux.c	/^int _filemgr_linux_fsync(int fd)$/;"	f
_filemgr_linux_goto_eof	src/filemgr_ops_linux.c	/^off_t _filemgr_linux_goto_eof(int fd)$/;"	f
_filemgr_linux_open	src/filemgr_ops_linux.c	/^int _filemgr_linux_open(const char *pathname, int flags, mode_t mode)$/;"	f
_filemgr_linux_pread	src/filemgr_ops_linux.c	/^int _filemgr_linux_pread(int fd, void *buf, size_t count, off_t offset)$/;"	f
_filemgr_linux_pwrite	src/filemgr_ops_linux.c	/^int _filemgr_linux_pwrite(int fd, void *buf, size_t count, off_t offset)$/;"	f
_filemgr_read_header	src/filemgr.c	/^void _filemgr_read_header(struct filemgr *file)$/;"	f
_filemgr_release_temp_buf	src/filemgr.c	/^void _filemgr_release_temp_buf(void *buf)$/;"	f
_filemgr_shutdown_temp_buf	src/filemgr.c	/^void _filemgr_shutdown_temp_buf()$/;"	f
_fl_lock	src/blockcache.c	/^static size_t _fl_lock, _fl_unlock, _fl_status;$/;"	v	file:
_fl_status	src/blockcache.c	/^static size_t _fl_lock, _fl_unlock, _fl_status;$/;"	v	file:
_fl_unlock	src/blockcache.c	/^static size_t _fl_lock, _fl_unlock, _fl_status;$/;"	v	file:
_fname_cmp	src/blockcache.c	/^INLINE int _fname_cmp(struct hash_elem *a, struct hash_elem *b)$/;"	f
_fname_create	src/blockcache.c	/^struct fnamedic_item * _fname_create(struct filemgr *file) {$/;"	f
_fname_free	src/blockcache.c	/^void _fname_free(struct fnamedic_item *fname)$/;"	f
_fname_hash	src/blockcache.c	/^INLINE uint32_t _fname_hash(struct hash *hash, struct hash_elem *e)$/;"	f
_get_data_size	src/btree_kv.c	/^INLINE size_t _get_data_size($/;"	f
_get_entry	src/list.h	/^#define _get_entry(/;"	d
_get_entry	src/mempool.c	/^#define _get_entry(/;"	d	file:
_get_entry	src/rbwrap.h	/^#define _get_entry(/;"	d
_get_kv	src/btree_kv.c	/^INLINE void _get_kv(struct bnode *node, idx_t idx, void *key, void *value)$/;"	f
_get_kv_size	src/btree_kv.c	/^INLINE size_t _get_kv_size(struct btree *tree, void *key, void *value)$/;"	f
_get_kvsize	src/btree.h	/^#define _get_kvsize(/;"	d
_get_nchunk	src/hbtrie.c	/^INLINE int _get_nchunk(struct hbtrie *trie, void *key, int keylen)$/;"	f
_get_nchunk_raw	src/hbtrie.c	/^INLINE int _get_nchunk_raw(struct hbtrie *trie, void *rawkey, int rawkeylen)$/;"	f
_get_nth_idx	src/btree_kv.c	/^INLINE void _get_nth_idx(struct bnode *node, idx_t num, idx_t den, idx_t *idx)$/;"	f
_get_nth_splitter	src/btree_kv.c	/^INLINE void _get_nth_splitter(struct bnode *prev_node, struct bnode *node, void *key)$/;"	f
_global_dbg_addr	utils/debug.c	/^static void* _global_dbg_addr[N_DBG_SWITCH];$/;"	v	file:
_global_dbg_switch	utils/debug.c	/^static uint8_t _global_dbg_switch[N_DBG_SWITCH];$/;"	v	file:
_global_dbg_uint64_t	utils/debug.c	/^static uint64_t _global_dbg_uint64_t[N_DBG_SWITCH];$/;"	v	file:
_gn	src/blockcache.c	/^uint64_t _gn(struct list *list)$/;"	f
_hash_cmp_rbwrap	src/hash.c	/^int _hash_cmp_rbwrap(struct rb_node *a, struct rb_node *b, void *aux)$/;"	f
_hbtrie_btree_cascaded_update	src/hbtrie.c	/^void _hbtrie_btree_cascaded_update(struct hbtrie *trie, struct list *btreelist, void *key)$/;"	f
_hbtrie_clear_msb	src/hbtrie.c	/^INLINE void _hbtrie_clear_msb(struct hbtrie *trie, void *value)$/;"	f
_hbtrie_fetch_meta	src/hbtrie.c	/^void _hbtrie_fetch_meta(struct hbtrie *trie, int metasize,$/;"	f
_hbtrie_find	src/hbtrie.c	/^hbtrie_result _hbtrie_find(struct hbtrie *trie, void *key, int keylen,$/;"	f
_hbtrie_find_diff_chunk	src/hbtrie.c	/^INLINE int _hbtrie_find_diff_chunk(struct hbtrie *trie, void *key1, void *key2, int nchunk)$/;"	f
_hbtrie_is_msb_set	src/hbtrie.c	/^INLINE int _hbtrie_is_msb_set(struct hbtrie *trie, void *value)$/;"	f
_hbtrie_next	src/hbtrie.c	/^hbtrie_result _hbtrie_next($/;"	f
_hbtrie_reform_key	src/hbtrie.c	/^int _hbtrie_reform_key(struct hbtrie *trie, void *rawkey,$/;"	f
_hbtrie_set_msb	src/hbtrie.c	/^INLINE void _hbtrie_set_msb(struct hbtrie *trie, void *value)$/;"	f
_hbtrie_store_meta	src/hbtrie.c	/^void _hbtrie_store_meta($/;"	f
_idx2crc	couchstore_api/couchstore_bench.c	/^uint32_t _idx2crc(size_t idx, uint32_t seed)$/;"	f
_init_kv_var	src/btree_kv.c	/^INLINE void _init_kv_var(struct btree *tree, void *key, void *value)$/;"	f
_ins_kv	src/btree_kv.c	/^INLINE void _ins_kv(struct bnode *node, idx_t idx, void *key, void *value)$/;"	f
_key	include/forestdb.h	/^    void *_key;$/;"	m	struct:__anon14
_key_expand	tests/hbtrie_test.c	/^void _key_expand(char *key_ori, char *key_out, int rpt)$/;"	f
_keylen	include/forestdb.h	/^    size_t _keylen;$/;"	m	struct:__anon14
_kv_ins_item_create	src/btree.c	/^INLINE struct kv_ins_item * _kv_ins_item_create($/;"	f
_kv_ins_item_free	src/btree.c	/^INLINE void _kv_ins_item_free(struct kv_ins_item *item){$/;"	f
_local_doc	couchstore_api/couch_common.h	/^    typedef struct _local_doc {$/;"	s
_memleak_add_to_index	utils/memleak.c	/^void _memleak_add_to_index(void *addr, size_t size, char *file, size_t line, uint8_t init_val)$/;"	f
_metasize_align	src/btree.c	/^    #define _metasize_align(/;"	d	file:
_ntime_gap	utils/time_utils.h	/^static struct timespec _ntime_gap(struct timespec a, struct timespec b)$/;"	f
_offset	include/forestdb.h	/^    uint64_t _offset;$/;"	m	struct:__anon14
_pl	src/blockcache.c	/^void _pl(struct list *list, uint64_t begin, uint64_t n)$/;"	f
_print_benchinfo	couchstore_api/couchstore_bench.c	/^void _print_benchinfo(struct bench_info *binfo)$/;"	f
_rand_gen_test	utils/adv_random.h	/^void _rand_gen_test()$/;"	f
_readkey_wrap	tests/hbtrie_test.c	/^size_t _readkey_wrap(void *handle, uint64_t offset, void *buf)$/;"	f
_set_doc	tests/docio_test.c	/^uint32_t _set_doc(struct docio_object *doc, char *key, char *meta, char *body)$/;"	f
_set_doc	tests/hbtrie_test.c	/^uint32_t _set_doc(struct docio_object *doc, char *key, char *meta, char *body)$/;"	f
_set_key	src/btree_kv.c	/^INLINE void _set_key(struct btree *tree, void *dst, void *src)$/;"	f
_set_kv	src/btree_kv.c	/^INLINE void _set_kv(struct bnode *node, idx_t idx, void *key, void *value)$/;"	f
_set_random_key	tests/hbtrie_test.c	/^void _set_random_key(char *key, int len)$/;"	f
_set_random_string	tests/forestdb_test.c	/^void _set_random_string(char *str, int len)$/;"	f
_set_random_string_smallabt	tests/forestdb_test.c	/^void _set_random_string_smallabt(char *str, int len)$/;"	f
_set_value	src/btree_kv.c	/^INLINE void _set_value(struct btree *tree, void *dst, void *src)$/;"	f
_sized_buf	couchstore_api/couch_common.h	/^    typedef struct _sized_buf {$/;"	s
_time_gap	tests/bcache_test.c	/^struct timespec _time_gap(struct timespec a, struct timespec b)$/;"	f
_time_gap	tests/forestdb_test.c	/^struct timespec _time_gap(struct timespec a, struct timespec b)$/;"	f
_utime_gap	utils/stopwatch.c	/^static struct timeval _utime_gap(struct timeval a, struct timeval b)$/;"	f	file:
_utime_gap	utils/time_utils.h	/^static struct timeval _utime_gap(struct timeval a, struct timeval b)$/;"	f
_value_to_bid_64	src/btree_kv.c	/^INLINE bid_t _value_to_bid_64(void *value)$/;"	f
_wal_cmp_bykey	src/wal.c	/^INLINE int _wal_cmp_bykey(struct hash_elem *a, struct hash_elem *b)$/;"	f
_wal_cmp_byseq	src/wal.c	/^INLINE int _wal_cmp_byseq(struct hash_elem *a, struct hash_elem *b)$/;"	f
_wal_get_docsize	src/wal.c	/^INLINE size_t _wal_get_docsize(fdb_doc *doc)$/;"	f
_wal_hash_bykey	src/wal.c	/^INLINE uint32_t _wal_hash_bykey(struct hash *hash, struct hash_elem *e)$/;"	f
_wal_hash_byseq	src/wal.c	/^INLINE uint32_t _wal_hash_byseq(struct hash *hash, struct hash_elem *e)$/;"	f
_worker_thread	tests/forestdb_test.c	/^void *_worker_thread(void *voidargs)$/;"	f
a	tests/mempool_test.c	/^    uint64_t a[4];$/;"	m	struct:test_struct	file:
a	utils/adv_random.h	/^    int64_t a;$/;"	m	struct:rndinfo
action	src/iterator.c	/^    wal_item_action action;$/;"	m	struct:iterator_wal_entry	file:
action	src/wal.h	/^    wal_item_action action;$/;"	m	struct:wal_item
addr	src/blockcache.c	/^    void *addr;$/;"	m	struct:bcache_item	file:
addr	src/btree.h	/^    void **addr;$/;"	m	struct:btree_iterator
addr	src/btreeblock.c	/^    void *addr;$/;"	m	struct:btreeblk_addr	file:
addr	src/btreeblock.c	/^    void *addr;$/;"	m	struct:btreeblk_block	file:
addr	src/filemgr.c	/^    void *addr;$/;"	m	struct:temp_buf_item	file:
addr	utils/memleak.c	/^    uint64_t addr;$/;"	m	struct:memleak_item	file:
addr_item	src/btreeblock.c	/^    struct btreeblk_addr *addr_item;$/;"	m	struct:btreeblk_block	typeref:struct:btreeblk_block::btreeblk_addr	file:
alc_list	src/btreeblock.h	/^    struct list alc_list;$/;"	m	struct:btreeblk_handle	typeref:struct:btreeblk_handle::list
async	src/filemgr.h	/^    uint8_t async;$/;"	m	struct:filemgr_config
aux	include/forestdb.h	/^    void *aux;$/;"	m	struct:__anon11
aux	src/rbtree.h	/^	void *aux;$/;"	m	struct:rb_root
b	utils/adv_random.h	/^    int64_t b;$/;"	m	struct:rndinfo
basic_test	tests/bcache_test.c	/^void basic_test()$/;"	f
basic_test	tests/btree_test.c	/^void basic_test()$/;"	f
basic_test	tests/btreeblock_test.c	/^void basic_test()$/;"	f
basic_test	tests/crc_test.c	/^void basic_test()$/;"	f
basic_test	tests/docio_test.c	/^void basic_test()$/;"	f
basic_test	tests/filemgr_test.c	/^void basic_test()$/;"	f
basic_test	tests/forestdb_test.c	/^void basic_test()$/;"	f
basic_test	tests/hash_test.c	/^void basic_test()$/;"	f
basic_test	tests/hbtrie_test.c	/^void basic_test()$/;"	f
basic_test	tests/list_test.c	/^void basic_test()$/;"	f
basic_test	tests/mempool_test.c	/^void basic_test()$/;"	f
basic_test2	tests/bcache_test.c	/^void basic_test2()$/;"	f
batch_dist	couchstore_api/couchstore_bench.c	/^    struct rndinfo batch_dist;$/;"	m	struct:bench_info	typeref:struct:bench_info::rndinfo	file:
batchrange	couchstore_api/couchstore_bench.c	/^    size_t batchrange;$/;"	m	struct:bench_info	file:
bcache	src/filemgr.h	/^    struct fnamedic_item *bcache;$/;"	m	struct:filemgr	typeref:struct:filemgr::fnamedic_item
bcache_blocksize	src/blockcache.c	/^static int bcache_blocksize;$/;"	v	file:
bcache_dirty_t	src/blockcache.h	/^} bcache_dirty_t;$/;"	t	typeref:enum:__anon17
bcache_flush	src/blockcache.c	/^void bcache_flush(struct filemgr *file)$/;"	f
bcache_flush_unit	src/blockcache.c	/^static size_t bcache_flush_unit;$/;"	v	file:
bcache_init	src/blockcache.c	/^void bcache_init(int nblock, int blocksize)$/;"	f
bcache_item	src/blockcache.c	/^struct bcache_item {$/;"	s	file:
bcache_lock	src/blockcache.c	/^static spin_t bcache_lock;$/;"	v	file:
bcache_nblock	src/blockcache.c	/^static uint64_t bcache_nblock;$/;"	v	file:
bcache_read	src/blockcache.c	/^int bcache_read(struct filemgr *file, bid_t bid, void *buf)$/;"	f
bcache_remove_clean_blocks	src/blockcache.c	/^void bcache_remove_clean_blocks(struct filemgr *file)$/;"	f
bcache_remove_dirty_blocks	src/blockcache.c	/^void bcache_remove_dirty_blocks(struct filemgr *file)$/;"	f
bcache_remove_file	src/blockcache.c	/^void bcache_remove_file(struct filemgr *file)$/;"	f
bcache_shutdown	src/blockcache.c	/^void bcache_shutdown()$/;"	f
bcache_sys_pagesize	src/blockcache.c	/^static size_t bcache_sys_pagesize;$/;"	v	file:
bcache_write	src/blockcache.c	/^int bcache_write(struct filemgr *file, bid_t bid, void *buf, bcache_dirty_t dirty)$/;"	f
bcache_write_partial	src/blockcache.c	/^int bcache_write_partial(struct filemgr *file, bid_t bid, void *buf, size_t offset, size_t len)$/;"	f
bench_info	couchstore_api/couchstore_bench.c	/^struct bench_info {$/;"	s	file:
bench_secs	couchstore_api/couchstore_bench.c	/^    size_t bench_secs;$/;"	m	struct:bench_info	file:
bhandle	include/forestdb.h	/^    struct btreeblk_handle *bhandle;$/;"	m	struct:__anon12	typeref:struct:__anon12::btreeblk_handle
bid	src/blockcache.c	/^    bid_t bid;$/;"	m	struct:bcache_item	file:
bid	src/btree.h	/^    bid_t *bid;$/;"	m	struct:btree_iterator
bid	src/btreeblock.c	/^    bid_t bid;$/;"	m	struct:btreeblk_block	file:
bid2value	src/btree.h	/^    voidref (*bid2value)(bid_t *bid);$/;"	m	struct:btree_kv_ops
bid_t	src/common.h	/^typedef uint64_t bid_t;$/;"	t
bin_size	src/btreeblock.h	/^    uint16_t bin_size;$/;"	m	struct:btreeblk_handle
binfo	couchstore_api/couchstore_bench.c	/^    struct bench_info *binfo;$/;"	m	struct:pop_thread_args	typeref:struct:pop_thread_args::bench_info	file:
bitswap32	utils/bitwise_utils.h	/^#define bitswap32(/;"	d
bitswap64	utils/bitwise_utils.h	/^#define bitswap64(/;"	d
blk_alloc	src/btree.h	/^    voidref (*blk_alloc)(void *handle, bid_t *bid);$/;"	m	struct:btree_blk_ops
blk_handle	src/btree.h	/^    void *blk_handle;$/;"	m	struct:btree
blk_is_writable	src/btree.h	/^    int (*blk_is_writable)(void *handle, bid_t bid);$/;"	m	struct:btree_blk_ops
blk_move	src/btree.h	/^    voidref (*blk_move)(void *handle, bid_t bid, bid_t *new_bid);$/;"	m	struct:btree_blk_ops
blk_operation_end	src/btree.h	/^    void (*blk_operation_end)(void *handle); \/\/ optional$/;"	m	struct:btree_blk_ops
blk_ops	src/btree.h	/^    struct btree_blk_ops *blk_ops;$/;"	m	struct:btree	typeref:struct:btree::btree_blk_ops
blk_read	src/btree.h	/^    voidref (*blk_read)(void *handle, bid_t bid);$/;"	m	struct:btree_blk_ops
blk_set_dirty	src/btree.h	/^    void (*blk_set_dirty)(void *handle, bid_t bid);$/;"	m	struct:btree_blk_ops
blksize	src/btree.h	/^    uint32_t blksize;$/;"	m	struct:btree
block	src/filemgr.h	/^    void *block;$/;"	m	struct:filemgr_buffer
blockpool	src/btreeblock.h	/^    struct list blockpool;$/;"	m	struct:btreeblk_handle	typeref:struct:btreeblk_handle::list
blocksize	include/forestdb.h	/^    uint32_t blocksize;$/;"	m	struct:__anon11
blocksize	src/filemgr.h	/^    int blocksize;$/;"	m	struct:filemgr_config
blocksize	src/filemgr.h	/^    uint32_t blocksize;$/;"	m	struct:filemgr
bnode	src/btree.h	/^struct bnode{$/;"	s
bnode_flag_t	src/btree.h	/^typedef uint8_t bnode_flag_t;$/;"	t
bnoderef	src/btree.h	/^typedef struct bnode* bnoderef;$/;"	t	typeref:struct:bnode
body	include/forestdb.h	/^    void *body;$/;"	m	struct:fdb_doc_struct
body	src/docio.h	/^    void *body;$/;"	m	struct:docio_object
bodylen	couchstore_api/couchstore_bench.c	/^    struct rndinfo bodylen;$/;"	m	struct:bench_info	typeref:struct:bench_info::rndinfo	file:
bodylen	include/forestdb.h	/^    size_t bodylen;$/;"	m	struct:fdb_doc_struct
bodylen	src/docio.h	/^    uint32_t bodylen;$/;"	m	struct:docio_length
bp	couchstore_api/couch_common.h	/^        uint64_t bp;                \/**< Byte offset of document data in file *\/$/;"	m	struct:_docinfo
btree	src/btree.h	/^    struct btree btree;$/;"	m	struct:btree_iterator	typeref:struct:btree_iterator::btree
btree	src/btree.h	/^struct btree {$/;"	s
btree	src/hbtrie.c	/^    struct btree btree;$/;"	m	struct:btreelist_item	typeref:struct:btreelist_item::btree	file:
btree_blk_ops	src/btree.h	/^struct btree_blk_ops {$/;"	s
btree_blk_ops	src/hbtrie.h	/^    struct btree_blk_ops *btree_blk_ops;$/;"	m	struct:hbtrie	typeref:struct:hbtrie::btree_blk_ops
btree_fanout	couchstore_api/couchstore_api.c	/^    size_t btree_fanout;$/;"	m	struct:_db	file:
btree_fanout	include/forestdb.h	/^    uint16_t btree_fanout;$/;"	m	struct:__anon12
btree_find	src/btree.c	/^btree_result btree_find(struct btree *btree, void *key, void *value_buf)$/;"	f
btree_get_key_range	src/btree.c	/^btree_result btree_get_key_range($/;"	f
btree_init	src/btree.c	/^btree_result btree_init($/;"	f
btree_init_from_bid	src/btree.c	/^btree_result btree_init_from_bid(struct btree *btree, void *blk_handle,$/;"	f
btree_insert	src/btree.c	/^btree_result btree_insert(struct btree *btree, void *key, void *value)$/;"	f
btree_it	src/hbtrie.c	/^    struct btree_iterator btree_it;$/;"	m	struct:btreeit_item	typeref:struct:btreeit_item::btree_iterator	file:
btree_iterator	src/btree.h	/^struct btree_iterator {$/;"	s
btree_iterator_free	src/btree.c	/^btree_result btree_iterator_free(struct btree_iterator *it)$/;"	f
btree_iterator_init	src/btree.c	/^btree_result btree_iterator_init(struct btree *btree, struct btree_iterator *it, void *initial_key)$/;"	f
btree_kv_get_kb32_vb64	src/btree_kv.c	/^struct btree_kv_ops * btree_kv_get_kb32_vb64(struct btree_kv_ops *kv_ops)$/;"	f
btree_kv_get_kb64_vb64	src/btree_kv.c	/^struct btree_kv_ops * btree_kv_get_kb64_vb64(struct btree_kv_ops *kv_ops)$/;"	f
btree_kv_get_ku32_vu64	src/btree_kv.c	/^struct btree_kv_ops * btree_kv_get_ku32_vu64()$/;"	f
btree_kv_get_ku64_vu64	src/btree_kv.c	/^struct btree_kv_ops * btree_kv_get_ku64_vu64()$/;"	f
btree_kv_ops	src/btree.h	/^struct btree_kv_ops {$/;"	s
btree_kv_ops	src/hbtrie.h	/^    struct btree_kv_ops *btree_kv_ops;$/;"	m	struct:hbtrie	typeref:struct:hbtrie::btree_kv_ops
btree_meta	src/btree.h	/^struct btree_meta{$/;"	s
btree_next	src/btree.c	/^btree_result btree_next(struct btree_iterator *it, void *key_buf, void *value_buf)$/;"	f
btree_nodesize	src/hbtrie.h	/^    uint32_t btree_nodesize;$/;"	m	struct:hbtrie
btree_operation_end	src/btree.c	/^btree_result btree_operation_end(struct btree *btree)$/;"	f
btree_print_func	src/btree.h	/^typedef void btree_print_func(struct btree *btree, void *key, void *value);$/;"	t
btree_print_node	src/btree.c	/^void btree_print_node(struct btree *btree, btree_print_func func)$/;"	f
btree_read_meta	src/btree.c	/^metasize_t btree_read_meta(struct btree *btree, void *buf)$/;"	f
btree_remove	src/btree.c	/^btree_result btree_remove(struct btree *btree, void *key)$/;"	f
btree_result	src/btree.h	/^} btree_result;$/;"	t	typeref:enum:__anon18
btree_update_meta	src/btree.c	/^void btree_update_meta(struct btree *btree, struct btree_meta *meta)$/;"	f
btreeblk_addr	src/btreeblock.c	/^struct btreeblk_addr{$/;"	s	file:
btreeblk_alloc	src/btreeblock.c	/^void * btreeblk_alloc(void *voidhandle, bid_t *bid)$/;"	f
btreeblk_block	src/btreeblock.c	/^struct btreeblk_block {$/;"	s	file:
btreeblk_end	src/btreeblock.c	/^void btreeblk_end(struct btreeblk_handle *handle)$/;"	f
btreeblk_free	src/btreeblock.c	/^void btreeblk_free(struct btreeblk_handle *handle)$/;"	f
btreeblk_get_ops	src/btreeblock.c	/^struct btree_blk_ops *btreeblk_get_ops()$/;"	f
btreeblk_handle	src/btreeblock.h	/^struct btreeblk_handle{$/;"	s
btreeblk_handle	src/hbtrie.h	/^    void *btreeblk_handle;$/;"	m	struct:hbtrie
btreeblk_init	src/btreeblock.c	/^void btreeblk_init(struct btreeblk_handle *handle, struct filemgr *file, int nodesize)$/;"	f
btreeblk_is_writable	src/btreeblock.c	/^int btreeblk_is_writable(void *voidhandle, bid_t bid)$/;"	f
btreeblk_move	src/btreeblock.c	/^void * btreeblk_move(void *voidhandle, bid_t bid, bid_t *new_bid)$/;"	f
btreeblk_operation_end	src/btreeblock.c	/^void btreeblk_operation_end(void *voidhandle)$/;"	f
btreeblk_ops	src/btreeblock.c	/^struct btree_blk_ops btreeblk_ops = {$/;"	v	typeref:struct:btree_blk_ops
btreeblk_read	src/btreeblock.c	/^void * btreeblk_read(void *voidhandle, bid_t bid)$/;"	f
btreeblk_set_dirty	src/btreeblock.c	/^void btreeblk_set_dirty(void *voidhandle, bid_t bid)$/;"	f
btreeblkops	include/forestdb.h	/^    struct btree_blk_ops *btreeblkops;$/;"	m	struct:__anon12	typeref:struct:__anon12::btree_blk_ops
btreeit_item	src/hbtrie.c	/^struct btreeit_item {$/;"	s	file:
btreeit_list	src/hbtrie.h	/^    struct list btreeit_list;$/;"	m	struct:hbtrie_iterator	typeref:struct:hbtrie_iterator::list
btreelist_item	src/hbtrie.c	/^struct btreelist_item {$/;"	s	file:
bucket	src/mempool.c	/^struct mempool_bucket bucket[10];$/;"	v	typeref:struct:mempool_bucket
bucketmap	src/mempool.c	/^struct mempool_bucket *bucketmap[MAXSIZE+1];$/;"	v	typeref:struct:mempool_bucket
buckets	src/hash.h	/^        struct list *buckets;$/;"	m	struct:hash	typeref:struct:hash::list
buckets	src/hash.h	/^        struct rb_root *buckets;$/;"	m	struct:hash	typeref:struct:hash::rb_root
buf	couchstore_api/couch_common.h	/^        char *buf;$/;"	m	struct:_sized_buf
buffercache_size	include/forestdb.h	/^    uint64_t buffercache_size;$/;"	m	struct:__anon11
cache	src/btreeblock.h	/^    struct btreeblk_block *cache[BTREEBLK_CACHE_LIMIT];$/;"	m	struct:btreeblk_handle	typeref:struct:btreeblk_handle::btreeblk_block
calloc	utils/memleak.h	/^    #define calloc(/;"	d
child_rootbid	src/hbtrie.c	/^    bid_t child_rootbid;$/;"	m	struct:btreelist_item	file:
chunkno	src/hbtrie.c	/^    chunkno_t chunkno;$/;"	m	struct:btreeit_item	file:
chunkno	src/hbtrie.c	/^    chunkno_t chunkno;$/;"	m	struct:btreelist_item	file:
chunkno	src/hbtrie.c	/^    chunkno_t chunkno;$/;"	m	struct:hbtrie_meta	file:
chunkno_t	src/hbtrie.c	/^typedef uint16_t chunkno_t;$/;"	t	file:
chunksize	include/forestdb.h	/^    uint16_t chunksize;$/;"	m	struct:__anon11
chunksize	src/hbtrie.h	/^    uint8_t chunksize;$/;"	m	struct:hbtrie
cleanlist	src/blockcache.c	/^    struct list cleanlist;$/;"	m	struct:fnamedic_item	typeref:struct:fnamedic_item::list	file:
close	include/libcouchstore/file_ops.h	/^        void (*close)(couch_file_handle handle);$/;"	m	struct:__anon16
close	src/filemgr.h	/^    int (*close)(int fd);$/;"	m	struct:filemgr_ops
cmp	src/btree.h	/^    int (*cmp)(void *key1, void *key2);$/;"	m	struct:btree_kv_ops
cmp	src/hash.h	/^    hash_cmp_func *cmp;$/;"	m	struct:hash
compact_count	src/forestdb.c	/^    static int compact_count=0;$/;"	v	file:
compact_term	tests/forestdb_test.c	/^    size_t compact_term;$/;"	m	struct:work_thread_args	file:
compact_thres	couchstore_api/couchstore_bench.c	/^    size_t compact_thres;$/;"	m	struct:bench_info	file:
compact_wo_reopen_test	tests/forestdb_test.c	/^void compact_wo_reopen_test()$/;"	f
config	include/forestdb.h	/^    fdb_config config;$/;"	m	struct:__anon12
config	src/filemgr.h	/^    struct filemgr_config *config;$/;"	m	struct:filemgr	typeref:struct:filemgr::filemgr_config
config	tests/forestdb_test.c	/^    fdb_config *config;$/;"	m	struct:work_thread_args	file:
constructor	include/libcouchstore/file_ops.h	/^        couch_file_handle (*constructor)(void* cookie);$/;"	m	struct:__anon16
content_meta	couchstore_api/couch_common.h	/^        couchstore_content_meta_flags content_meta;  \/**< Content metadata flags *\/$/;"	m	struct:_docinfo
cookie	include/libcouchstore/file_ops.h	/^        void *cookie;$/;"	m	struct:__anon16
copy_kv	src/btree.h	/^    void (*copy_kv)(struct bnode *node_dst, struct bnode *node_src, idx_t dst_idx, idx_t src_idx, idx_t len);$/;"	m	struct:btree_kv_ops
couch_file_handle	include/libcouchstore/file_ops.h	/^    typedef struct couch_file_handle_opaque* couch_file_handle;$/;"	t	typeref:struct:couch_file_handle_opaque
couch_file_ops	include/libcouchstore/file_ops.h	/^    } couch_file_ops;$/;"	t	typeref:struct:__anon16
couchstore_changes_callback_fn	couchstore_api/couch_db.h	/^    typedef int (*couchstore_changes_callback_fn)(Db *db,$/;"	t
couchstore_close_db	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_close_db(Db *db)$/;"	f
couchstore_close_db	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_close_db(Db *db)$/;"	f
couchstore_commit	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_commit(Db *db)$/;"	f
couchstore_commit	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_commit(Db *db)$/;"	f
couchstore_compact_db	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_compact_db(Db* source, const char* target_filename)$/;"	f
couchstore_compact_db	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_compact_db(Db* source, const char* target_filename)$/;"	f
couchstore_compact_db_ex	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_compact_db_ex(Db* source, const char* target_filename,$/;"	f
couchstore_compact_db_ex	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_compact_db_ex(Db* source, const char* target_filename,$/;"	f
couchstore_compact_flags	couchstore_api/couch_db.h	/^    typedef uint64_t couchstore_compact_flags;$/;"	t
couchstore_content_meta_flags	couchstore_api/couch_common.h	/^    typedef uint8_t couchstore_content_meta_flags;$/;"	t
couchstore_db_info	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_db_info(Db *db, DbInfo* info)$/;"	f
couchstore_db_info	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_db_info(Db *db, DbInfo* info)$/;"	f
couchstore_docinfo_by_id	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_docinfo_by_id(Db *db, const void *id, size_t idlen, DocInfo **pInfo)$/;"	f
couchstore_docinfo_by_id	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_docinfo_by_id(Db *db, const void *id, size_t idlen, DocInfo **pInfo)$/;"	f
couchstore_docinfos_by_id	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_docinfos_by_id(Db *db, const sized_buf ids[], unsigned numDocs,$/;"	f
couchstore_docinfos_by_id	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_docinfos_by_id(Db *db, const sized_buf ids[], unsigned numDocs,$/;"	f
couchstore_docinfos_by_sequence	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_docinfos_by_sequence(Db *db,$/;"	f
couchstore_docinfos_by_sequence	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_docinfos_by_sequence(Db *db,$/;"	f
couchstore_docinfos_options	couchstore_api/couch_db.h	/^    typedef uint64_t couchstore_docinfos_options;$/;"	t
couchstore_error_t	include/libcouchstore/error.h	/^    } couchstore_error_t;$/;"	t	typeref:enum:__anon15
couchstore_free_docinfo	couchstore_api/couchstore_api.c	/^void couchstore_free_docinfo(DocInfo *docinfo)$/;"	f
couchstore_free_docinfo	couchstore_api/couchstore_api_leveldb.c	/^void couchstore_free_docinfo(DocInfo *docinfo)$/;"	f
couchstore_free_document	couchstore_api/couchstore_api.c	/^void couchstore_free_document(Doc *doc)$/;"	f
couchstore_free_document	couchstore_api/couchstore_api_leveldb.c	/^void couchstore_free_document(Doc *doc)$/;"	f
couchstore_open_db	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_open_db(const char *filename,$/;"	f
couchstore_open_db	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_open_db(const char *filename,$/;"	f
couchstore_open_db_ex	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_open_db_ex(const char *filename,$/;"	f
couchstore_open_db_ex	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_open_db_ex(const char *filename,$/;"	f
couchstore_open_document	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_open_document(Db *db,$/;"	f
couchstore_open_document	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_open_document(Db *db,$/;"	f
couchstore_open_flags	couchstore_api/couch_db.h	/^    typedef uint64_t couchstore_open_flags;$/;"	t
couchstore_open_options	couchstore_api/couch_db.h	/^    typedef uint64_t couchstore_open_options;$/;"	t
couchstore_save_document	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_save_document(Db *db, const Doc *doc, DocInfo *info,$/;"	f
couchstore_save_document	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_save_document(Db *db, const Doc *doc, DocInfo *info,$/;"	f
couchstore_save_documents	couchstore_api/couchstore_api.c	/^couchstore_error_t couchstore_save_documents(Db *db, Doc* const docs[], DocInfo *infos[],$/;"	f
couchstore_save_documents	couchstore_api/couchstore_api_leveldb.c	/^couchstore_error_t couchstore_save_documents(Db *db, Doc* const docs[], DocInfo *infos[],$/;"	f
couchstore_save_options	couchstore_api/couch_db.h	/^    typedef uint64_t couchstore_save_options;$/;"	t
couchstore_walk_tree_callback_fn	couchstore_api/couch_db.h	/^    typedef int (*couchstore_walk_tree_callback_fn)(Db *db,$/;"	t
crash_recovery_test	tests/forestdb_test.c	/^void crash_recovery_test()$/;"	f
crc32_1	utils/crc32.c	/^uint32_t crc32_1(const void* data, size_t len, uint32_t prev_value)$/;"	f
crc32_8	utils/crc32.c	/^uint32_t crc32_8(const void* data, size_t len, uint32_t prev_value)$/;"	f
crc32_8_last8	utils/crc32.c	/^uint32_t crc32_8_last8(const void *data, size_t len, uint32_t prev_value)$/;"	f
crc_lookup	utils/crc32.c	/^const uint32_t crc_lookup[8][256] =$/;"	v
cs_off_t	couchstore_api/couch_common.h	/^    typedef int64_t cs_off_t;$/;"	t
cur_header_revnum	include/forestdb.h	/^    uint64_t cur_header_revnum;$/;"	m	struct:__anon12
curblock	src/docio.h	/^    bid_t curblock;$/;"	m	struct:docio_handle
curfile	src/blockcache.c	/^    struct filemgr *curfile;$/;"	m	struct:fnamedic_item	typeref:struct:fnamedic_item::filemgr	file:
curkey	src/btree.h	/^    void *curkey;$/;"	m	struct:btree_iterator
curkey	src/hbtrie.h	/^    void *curkey;$/;"	m	struct:hbtrie_iterator
curlist	src/blockcache.c	/^    struct list *curlist;$/;"	m	struct:fnamedic_item	typeref:struct:fnamedic_item::list	file:
curpos	src/docio.h	/^    uint32_t curpos;$/;"	m	struct:docio_handle
data	couchstore_api/couch_common.h	/^        sized_buf data;$/;"	m	struct:_doc
data	src/btree.h	/^    void *data;$/;"	m	struct:bnode
data	src/btree.h	/^    void *data;$/;"	m	struct:btree_meta
data	src/filemgr.h	/^    void *data;$/;"	m	struct:filemgr_header
datasize	include/forestdb.h	/^    uint64_t datasize;$/;"	m	struct:__anon12
db	couchstore_api/couchstore_api_leveldb.c	/^    leveldb_t *db;$/;"	m	struct:_db	file:
db	couchstore_api/couchstore_bench.c	/^    Db **db;$/;"	m	struct:pop_thread_args	file:
db_seq	couchstore_api/couch_common.h	/^        uint64_t db_seq;            \/**< Sequence number in database *\/$/;"	m	struct:_docinfo
deleted	couchstore_api/couch_common.h	/^        int deleted;                \/**< Is this a deleted revision? *\/$/;"	m	struct:_docinfo
deleted	couchstore_api/couch_common.h	/^        int deleted;$/;"	m	struct:_local_doc
deleted_count	couchstore_api/couch_common.h	/^        uint64_t deleted_count;     \/**< Total number of deleted documents *\/$/;"	m	struct:__anon2
destructor	include/libcouchstore/file_ops.h	/^        void (*destructor)(couch_file_handle handle);$/;"	m	struct:__anon16
dhandle	include/forestdb.h	/^    struct docio_handle *dhandle;$/;"	m	struct:__anon12	typeref:struct:__anon12::docio_handle
dictionary	utils/iniparser.h	/^} dictionary ;$/;"	t	typeref:struct:_dictionary_
dictionary_del	utils/iniparser.c	/^static void dictionary_del(dictionary * d)$/;"	f	file:
dictionary_dump	utils/iniparser.c	/^static void dictionary_dump(dictionary *d, FILE *f)$/;"	f	file:
dictionary_get	utils/iniparser.c	/^static char * dictionary_get(dictionary * d, char * key, char * def)$/;"	f	file:
dictionary_hash	utils/iniparser.c	/^static unsigned dictionary_hash(char * key)$/;"	f	file:
dictionary_new	utils/iniparser.c	/^static dictionary * dictionary_new(int size)$/;"	f	file:
dictionary_set	utils/iniparser.c	/^static void dictionary_set(dictionary * d, char * key, char * val)$/;"	f	file:
dictionary_unset	utils/iniparser.c	/^static void dictionary_unset(dictionary * d, char * key)$/;"	f	file:
dirty	src/btreeblock.c	/^    uint8_t dirty;$/;"	m	struct:btreeblk_block	file:
dirty_item	src/blockcache.c	/^struct dirty_item {$/;"	s	file:
do_bench	couchstore_api/couchstore_bench.c	/^void do_bench(struct bench_info *binfo)$/;"	f
doc	tests/forestdb_test.c	/^    fdb_doc **doc;$/;"	m	struct:work_thread_args	file:
doc_count	couchstore_api/couch_common.h	/^        uint64_t doc_count;         \/**< Total number of (non-deleted) documents *\/$/;"	m	struct:__anon2
doc_handle	src/hbtrie.h	/^    void *doc_handle;$/;"	m	struct:hbtrie
doc_size	src/wal.h	/^    uint32_t doc_size;$/;"	m	struct:wal_item
docio_append_doc	src/docio.c	/^bid_t docio_append_doc(struct docio_handle *handle, struct docio_object *doc)$/;"	f
docio_append_doc_	src/docio.c	/^bid_t docio_append_doc_(struct docio_handle *handle, struct docio_object *doc)$/;"	f
docio_append_doc_raw	src/docio.c	/^INLINE bid_t docio_append_doc_raw(struct docio_handle *handle, uint64_t size, void *buf)$/;"	f
docio_check_buffer	src/docio.c	/^int docio_check_buffer(struct docio_handle *handle, bid_t bid)$/;"	f
docio_free	src/docio.c	/^void docio_free(struct docio_handle *handle)$/;"	f
docio_handle	src/docio.h	/^struct docio_handle {$/;"	s
docio_init	src/docio.c	/^void docio_init(struct docio_handle *handle, struct filemgr *file)$/;"	f
docio_length	src/docio.h	/^struct docio_length {$/;"	s
docio_object	src/docio.h	/^struct docio_object {$/;"	s
docio_read_doc	src/docio.c	/^uint64_t docio_read_doc(struct docio_handle *handle, uint64_t offset,$/;"	f
docio_read_doc_key	src/docio.c	/^void docio_read_doc_key(struct docio_handle *handle, uint64_t offset, keylen_t *keylen, void *keybuf)$/;"	f
docio_read_doc_key_meta	src/docio.c	/^uint64_t docio_read_doc_key_meta(struct docio_handle *handle, uint64_t offset, struct docio_object *doc)$/;"	f
docio_read_doc_length	src/docio.c	/^struct docio_length docio_read_doc_length(struct docio_handle *handle, uint64_t offset)$/;"	f
durability_opt	include/forestdb.h	/^    fdb_durability_opt_t durability_opt;$/;"	m	struct:__anon11
e	src/filemgr.h	/^    struct hash_elem e;$/;"	m	struct:filemgr	typeref:struct:filemgr::hash_elem
e	src/hbtrie.c	/^    struct list_elem e;$/;"	m	struct:btreelist_item	typeref:struct:btreelist_item::list_elem	file:
e	tests/hash_test.c	/^    struct hash_elem e;$/;"	m	struct:item	typeref:struct:item::hash_elem	file:
elapsed	utils/stopwatch.h	/^    struct timeval elapsed;$/;"	m	struct:stopwatch	typeref:struct:stopwatch::timeval
empty_callback	couchstore_api/couchstore_bench.c	/^int empty_callback(Db *db, DocInfo *docinfo, void *ctx)$/;"	f
end_key	include/forestdb.h	/^    void *end_key;$/;"	m	struct:__anon14
end_keylen	include/forestdb.h	/^    size_t end_keylen;$/;"	m	struct:__anon14
endian_test	tests/crc_test.c	/^void endian_test()$/;"	f
fd	src/filemgr.h	/^    int fd;$/;"	m	struct:filemgr
fdatasync	src/filemgr.h	/^    int (*fdatasync)(int fd);$/;"	m	struct:filemgr_ops
fdb	couchstore_api/couchstore_api.c	/^    fdb_handle fdb;$/;"	m	struct:_db	file:
fdb_close	src/forestdb.c	/^fdb_status fdb_close(fdb_handle *handle)$/;"	f
fdb_commit	src/forestdb.c	/^fdb_status fdb_commit(fdb_handle *handle)$/;"	f
fdb_compact	src/forestdb.c	/^fdb_status fdb_compact(fdb_handle *handle, char *new_filename)$/;"	f
fdb_config	include/forestdb.h	/^} fdb_config;$/;"	t	typeref:struct:__anon11
fdb_doc	include/forestdb.h	/^} fdb_doc;$/;"	t	typeref:struct:fdb_doc_struct
fdb_doc_create	src/forestdb.c	/^fdb_status fdb_doc_create(fdb_doc **doc, void *key, size_t keylen, void *meta, size_t metalen,$/;"	f
fdb_doc_free	src/forestdb.c	/^fdb_status fdb_doc_free(fdb_doc *doc)$/;"	f
fdb_doc_struct	include/forestdb.h	/^typedef struct fdb_doc_struct {$/;"	s
fdb_doc_update	src/forestdb.c	/^fdb_status fdb_doc_update(fdb_doc **doc, void *meta, size_t metalen, void *body, size_t bodylen)$/;"	f
fdb_durability_opt_t	include/forestdb.h	/^typedef uint8_t fdb_durability_opt_t;$/;"	t
fdb_estimate_space_used	src/forestdb.c	/^size_t fdb_estimate_space_used(fdb_handle *handle)$/;"	f
fdb_flush_wal	src/forestdb.c	/^fdb_status fdb_flush_wal(fdb_handle *handle)$/;"	f
fdb_get	src/forestdb.c	/^fdb_status fdb_get(fdb_handle *handle, fdb_doc *doc)$/;"	f
fdb_get_byseq	src/forestdb.c	/^fdb_status fdb_get_byseq(fdb_handle *handle, fdb_doc *doc)$/;"	f
fdb_get_metaonly	src/forestdb.c	/^fdb_status fdb_get_metaonly(fdb_handle *handle, fdb_doc *doc, uint64_t *body_offset)$/;"	f
fdb_get_metaonly_byseq	src/forestdb.c	/^fdb_status fdb_get_metaonly_byseq(fdb_handle *handle, fdb_doc *doc, uint64_t *body_offset)$/;"	f
fdb_handle	include/forestdb.h	/^} fdb_handle;$/;"	t	typeref:struct:__anon12
fdb_iterator	include/forestdb.h	/^} fdb_iterator;$/;"	t	typeref:struct:__anon14
fdb_iterator_close	src/iterator.c	/^fdb_status fdb_iterator_close(fdb_iterator *iterator)$/;"	f
fdb_iterator_init	src/iterator.c	/^fdb_status fdb_iterator_init(fdb_handle *handle,$/;"	f
fdb_iterator_next	src/iterator.c	/^fdb_status fdb_iterator_next(fdb_iterator *iterator, fdb_doc **doc)$/;"	f
fdb_iterator_next_offset	src/iterator.c	/^fdb_status fdb_iterator_next_offset(fdb_iterator *iterator,$/;"	f
fdb_iterator_opt_t	include/forestdb.h	/^typedef uint8_t fdb_iterator_opt_t;$/;"	t
fdb_open	src/forestdb.c	/^fdb_status fdb_open(fdb_handle *handle, char *filename, fdb_config *config)$/;"	f
fdb_seqnum_t	option/option.h	/^typedef uint64_t fdb_seqnum_t;$/;"	t
fdb_seqtree_opt_t	include/forestdb.h	/^typedef uint8_t fdb_seqtree_opt_t;$/;"	t
fdb_set	src/forestdb.c	/^fdb_status fdb_set(fdb_handle *handle, fdb_doc *doc)$/;"	f
fdb_shutdown	src/forestdb.c	/^fdb_status fdb_shutdown()$/;"	f
fdb_status	include/forestdb.h	/^} fdb_status;$/;"	t	typeref:enum:__anon8
file	include/forestdb.h	/^    struct filemgr *file;$/;"	m	struct:__anon12	typeref:struct:__anon12::filemgr
file	src/btreeblock.h	/^    struct filemgr *file;$/;"	m	struct:btreeblk_handle	typeref:struct:btreeblk_handle::filemgr
file	src/docio.h	/^    struct filemgr *file;$/;"	m	struct:docio_handle	typeref:struct:docio_handle::filemgr
file	tests/bcache_test.c	/^    struct filemgr *file;$/;"	m	struct:worker_args	typeref:struct:worker_args::filemgr	file:
file	utils/memleak.c	/^    char *file;$/;"	m	struct:memleak_item	file:
file_empty	src/blockcache.c	/^static struct list file_lru, file_empty;$/;"	v	typeref:struct:	file:
file_lru	src/blockcache.c	/^static struct list file_lru, file_empty;$/;"	v	typeref:struct:list	file:
file_status_t	src/common.h	/^typedef uint8_t file_status_t;$/;"	t
filelist_lock	src/blockcache.c	/^static spin_t filelist_lock;$/;"	v	file:
filemgr	src/filemgr.h	/^struct filemgr {$/;"	s
filemgr_alloc	src/filemgr.c	/^bid_t filemgr_alloc(struct filemgr *file)$/;"	f
filemgr_alloc_multiple	src/filemgr.c	/^void filemgr_alloc_multiple(struct filemgr *file, int nblock, bid_t *begin, bid_t *end)$/;"	f
filemgr_alloc_multiple_cond	src/filemgr.c	/^bid_t filemgr_alloc_multiple_cond($/;"	f
filemgr_buffer	src/filemgr.h	/^struct filemgr_buffer{$/;"	s
filemgr_close	src/filemgr.c	/^void filemgr_close(struct filemgr *file)$/;"	f
filemgr_commit	src/filemgr.c	/^void filemgr_commit(struct filemgr *file)$/;"	f
filemgr_config	src/filemgr.h	/^struct filemgr_config {$/;"	s
filemgr_fetch_header	src/filemgr.c	/^void* filemgr_fetch_header(struct filemgr *file, void *buf, size_t *len)$/;"	f
filemgr_get_file_status	src/filemgr.c	/^file_status_t filemgr_get_file_status(struct filemgr *file)$/;"	f
filemgr_get_filename_ptr	src/filemgr.c	/^char* filemgr_get_filename_ptr(struct filemgr *file, char **filename, uint16_t *len)$/;"	f
filemgr_get_header_revnum	src/filemgr.c	/^filemgr_header_revnum_t filemgr_get_header_revnum(struct filemgr *file)$/;"	f
filemgr_get_next_alloc_block	src/filemgr.c	/^bid_t filemgr_get_next_alloc_block(struct filemgr *file)$/;"	f
filemgr_header	src/filemgr.h	/^struct filemgr_header{$/;"	s
filemgr_header_len_t	src/filemgr.h	/^typedef uint16_t filemgr_header_len_t;$/;"	t
filemgr_header_revnum_t	src/filemgr.h	/^typedef uint64_t filemgr_header_revnum_t;$/;"	t
filemgr_init	src/filemgr.c	/^void filemgr_init(struct filemgr_config *config)$/;"	f
filemgr_initialized	src/filemgr.c	/^static int filemgr_initialized = 0;$/;"	v	file:
filemgr_is_writable	src/filemgr.c	/^int filemgr_is_writable(struct filemgr *file, bid_t bid)$/;"	f
filemgr_magic_t	src/filemgr.h	/^typedef uint64_t filemgr_magic_t;$/;"	t
filemgr_mutex_lock	src/filemgr.c	/^void filemgr_mutex_lock(struct filemgr *file)$/;"	f
filemgr_mutex_unlock	src/filemgr.c	/^void filemgr_mutex_unlock(struct filemgr *file)$/;"	f
filemgr_open	src/filemgr.c	/^struct filemgr * filemgr_open(char *filename, struct filemgr_ops *ops,$/;"	f
filemgr_openlock	src/filemgr.c	/^static spin_t filemgr_openlock;$/;"	v	file:
filemgr_ops	src/filemgr.h	/^struct filemgr_ops {$/;"	s
filemgr_read	src/filemgr.c	/^void filemgr_read(struct filemgr *file, bid_t bid, void *buf)$/;"	f
filemgr_remove_file	src/filemgr.c	/^void filemgr_remove_file(struct filemgr *file)$/;"	f
filemgr_remove_pending	src/filemgr.c	/^void filemgr_remove_pending(struct filemgr *old_file, struct filemgr *new_file)$/;"	f
filemgr_shutdown	src/filemgr.c	/^void filemgr_shutdown()$/;"	f
filemgr_sync	src/filemgr.c	/^void filemgr_sync(struct filemgr *file)$/;"	f
filemgr_sys_pagesize	src/filemgr.c	/^static size_t filemgr_sys_pagesize;$/;"	v	file:
filemgr_update_file_status	src/filemgr.c	/^void filemgr_update_file_status(struct filemgr *file, file_status_t status)$/;"	f
filemgr_update_header	src/filemgr.c	/^uint64_t filemgr_update_header(struct filemgr *file, void *buf, size_t len)$/;"	f
filemgr_write	src/filemgr.c	/^void filemgr_write(struct filemgr *file, bid_t bid, void *buf)$/;"	f
filemgr_write_offset	src/filemgr.c	/^void filemgr_write_offset(struct filemgr *file, bid_t bid, uint64_t offset, uint64_t len, void *buf)$/;"	f
filename	couchstore_api/couch_common.h	/^        const char* filename;       \/**< Filesystem path *\/$/;"	m	struct:__anon2
filename	couchstore_api/couchstore_api.c	/^    char *filename;$/;"	m	struct:_db	file:
filename	couchstore_api/couchstore_api_leveldb.c	/^    char *filename;$/;"	m	struct:_db	file:
filename	couchstore_api/couchstore_bench.c	/^    char *filename;$/;"	m	struct:bench_info	file:
filename	src/blockcache.c	/^    char *filename;$/;"	m	struct:fnamedic_item	file:
filename	src/filemgr.h	/^    char *filename;$/;"	m	struct:filemgr
filename_count	tests/forestdb_test.c	/^    int *filename_count;$/;"	m	struct:work_thread_args	file:
filename_count_lock	tests/forestdb_test.c	/^    spin_t *filename_count_lock;$/;"	m	struct:work_thread_args	file:
filename_len	src/blockcache.c	/^    uint16_t filename_len;$/;"	m	struct:fnamedic_item	file:
filename_len	src/filemgr.h	/^    uint16_t filename_len;$/;"	m	struct:filemgr
fileops	include/forestdb.h	/^    struct filemgr_ops *fileops;$/;"	m	struct:__anon11	typeref:struct:__anon11::filemgr_ops
fileops	include/forestdb.h	/^    struct filemgr_ops *fileops;$/;"	m	struct:__anon12	typeref:struct:__anon12::filemgr_ops
flag	include/forestdb.h	/^    uint32_t flag;$/;"	m	struct:__anon11
flag	src/blockcache.c	/^    uint8_t flag;$/;"	m	struct:bcache_item	file:
flag	src/btree.h	/^    bnode_flag_t flag;$/;"	m	struct:bnode
flag	src/filemgr.h	/^    int flag;$/;"	m	struct:filemgr_config
flag	src/wal.h	/^    uint8_t flag;$/;"	m	struct:wal
flush_test	tests/btree_test.c	/^void flush_test()$/;"	f
fname	src/blockcache.c	/^    struct fnamedic_item *fname;$/;"	m	struct:bcache_item	typeref:struct:bcache_item::fnamedic_item	file:
fnamedic	src/blockcache.c	/^static struct hash fnamedic;$/;"	v	typeref:struct:hash	file:
fnamedic_item	src/blockcache.c	/^struct fnamedic_item {$/;"	s	file:
free	utils/memleak.h	/^    #define free(/;"	d
free_kv_var	src/btree.h	/^    void (*free_kv_var)(struct btree *tree, void *key, void *value);$/;"	m	struct:btree_kv_ops
freelist	src/blockcache.c	/^static struct list freelist;$/;"	v	typeref:struct:list	file:
freelist_count	src/blockcache.c	/^static size_t freelist_count=0;$/;"	v	file:
freelist_lock	src/blockcache.c	/^static spin_t freelist_lock;$/;"	v	file:
fsync	src/filemgr.h	/^    int (*fsync)(int fd);$/;"	m	struct:filemgr_ops
get_benchinfo	couchstore_api/couchstore_bench.c	/^struct bench_info get_benchinfo()$/;"	f
get_data_size	src/btree.h	/^    size_t (*get_data_size)(struct bnode *node, void *new_minkey, void *key_arr, void *value_arr, size_t len);$/;"	m	struct:btree_kv_ops
get_filesize	couchstore_api/couchstore_bench.c	/^uint64_t get_filesize(char *filename)$/;"	f
get_kv	src/btree.h	/^    void (*get_kv)(struct bnode *node, idx_t idx, void *key, void *value);$/;"	m	struct:btree_kv_ops
get_kv_size	src/btree.h	/^    size_t (*get_kv_size)(struct btree *tree, void *key, void *value);$/;"	m	struct:btree_kv_ops
get_linux_filemgr_ops	src/filemgr_ops_linux.c	/^struct filemgr_ops * get_linux_filemgr_ops()$/;"	f
get_nth_idx	src/btree.h	/^    void (*get_nth_idx)(struct bnode *node, idx_t num, idx_t den, idx_t *idx);$/;"	m	struct:btree_kv_ops
get_nth_splitter	src/btree.h	/^    void (*get_nth_splitter)(struct bnode *prev_node, struct bnode *node, void *key);$/;"	m	struct:btree_kv_ops
get_random	utils/adv_random.h	/^int64_t get_random(struct rndinfo* ri, uint64_t rv1, uint64_t rv2)$/;"	f
getsetkv_test	tests/btree_test.c	/^void getsetkv_test()$/;"	f
global_config	src/filemgr.c	/^static struct filemgr_config global_config;$/;"	v	typeref:struct:filemgr_config	file:
goto_eof	include/libcouchstore/file_ops.h	/^        cs_off_t (*goto_eof)(couch_file_handle handle);$/;"	m	struct:__anon16
goto_eof	src/filemgr.h	/^    off_t (*goto_eof)(int fd);$/;"	m	struct:filemgr_ops
handle	include/forestdb.h	/^    fdb_handle handle;$/;"	m	struct:__anon14
hash	src/blockcache.c	/^    uint32_t hash;$/;"	m	struct:fnamedic_item	file:
hash	src/filemgr.c	/^static struct hash hash;$/;"	v	typeref:struct:hash	file:
hash	src/hash.h	/^    hash_hash_func *hash;$/;"	m	struct:hash
hash	src/hash.h	/^struct hash {$/;"	s
hash	utils/iniparser.h	/^	unsigned *hash;$/;"	m	struct:_dictionary_
hash_bykey	src/wal.h	/^    struct hash hash_bykey;$/;"	m	struct:wal	typeref:struct:wal::hash
hash_byseq	src/wal.h	/^    struct hash hash_byseq;$/;"	m	struct:wal	typeref:struct:wal::hash
hash_cmp	tests/hash_test.c	/^int hash_cmp(struct hash_elem *a, struct hash_elem *b)$/;"	f
hash_cmp_func	src/hash.h	/^typedef int hash_cmp_func(struct hash_elem *a, struct hash_elem *b);$/;"	t
hash_djb2	src/hash_functions.c	/^uint32_t hash_djb2(void *value, int len)$/;"	f
hash_djb2_last8	src/hash_functions.c	/^uint32_t hash_djb2_last8(void *value, int len)$/;"	f
hash_elem	src/blockcache.c	/^    struct hash_elem hash_elem;$/;"	m	struct:bcache_item	typeref:struct:bcache_item::hash_elem	file:
hash_elem	src/blockcache.c	/^    struct hash_elem hash_elem;$/;"	m	struct:fnamedic_item	typeref:struct:fnamedic_item::hash_elem	file:
hash_elem	src/hash.h	/^struct hash_elem {$/;"	s
hash_find	src/hash.c	/^struct hash_elem * hash_find(struct hash *ht, struct hash_elem *e)$/;"	f
hash_free	src/hash.c	/^void hash_free(struct hash *hash)$/;"	f
hash_free_active	src/hash.c	/^void hash_free_active(struct hash *hash, hash_free_func *free_func)$/;"	f
hash_free_func	src/hash.h	/^typedef void hash_free_func(struct hash_elem *e);$/;"	t
hash_func	tests/hash_test.c	/^unsigned hash_func(struct hash *hash, struct hash_elem *e)$/;"	f
hash_hash_func	src/hash.h	/^typedef uint32_t hash_hash_func(struct hash *hash, struct hash_elem *e);$/;"	t
hash_init	src/hash.c	/^void hash_init(struct hash *hash, int nbuckets, hash_hash_func *hash_func, hash_cmp_func *cmp_func)$/;"	f
hash_insert	src/hash.c	/^void hash_insert(struct hash *hash, struct hash_elem *e)$/;"	f
hash_remove	src/hash.c	/^struct hash_elem * hash_remove(struct hash *hash, struct hash_elem *e)$/;"	f
hash_shuffle_2uint	src/hash_functions.c	/^uint32_t hash_shuffle_2uint(uint64_t a, uint64_t b)$/;"	f
hash_uint_modular	src/hash_functions.c	/^uint32_t hash_uint_modular(uint64_t value, uint64_t mod)$/;"	f
hashtable	src/blockcache.c	/^    struct hash hashtable;$/;"	m	struct:fnamedic_item	typeref:struct:fnamedic_item::hash	file:
hbtrie	src/hbtrie.h	/^struct hbtrie {$/;"	s
hbtrie_find	src/hbtrie.c	/^hbtrie_result hbtrie_find(struct hbtrie *trie, void *rawkey,$/;"	f
hbtrie_free	src/hbtrie.c	/^void hbtrie_free(struct hbtrie *trie)$/;"	f
hbtrie_func_readkey	src/hbtrie.h	/^typedef size_t hbtrie_func_readkey(void *handle, uint64_t offset, void *buf);$/;"	t
hbtrie_init	src/hbtrie.c	/^void hbtrie_init(struct hbtrie *trie, int chunksize, int valuelen,$/;"	f
hbtrie_insert	src/hbtrie.c	/^hbtrie_result hbtrie_insert(struct hbtrie *trie, void *rawkey, int rawkeylen,$/;"	f
hbtrie_iterator	include/forestdb.h	/^    struct hbtrie_iterator *hbtrie_iterator;$/;"	m	struct:__anon14	typeref:struct:__anon14::hbtrie_iterator
hbtrie_iterator	src/hbtrie.h	/^struct hbtrie_iterator {$/;"	s
hbtrie_iterator_free	src/hbtrie.c	/^hbtrie_result hbtrie_iterator_free(struct hbtrie_iterator *it)$/;"	f
hbtrie_iterator_init	src/hbtrie.c	/^hbtrie_result hbtrie_iterator_init($/;"	f
hbtrie_key_test	tests/hbtrie_test.c	/^void hbtrie_key_test()$/;"	f
hbtrie_meta	src/hbtrie.c	/^struct hbtrie_meta {$/;"	s	file:
hbtrie_next	src/hbtrie.c	/^hbtrie_result hbtrie_next(struct hbtrie_iterator *it, void *key_buf, size_t *keylen, void *value_buf)$/;"	f
hbtrie_remove	src/hbtrie.c	/^hbtrie_result hbtrie_remove(struct hbtrie *trie, void *rawkey, int rawkeylen)$/;"	f
hbtrie_result	src/hbtrie.h	/^} hbtrie_result;$/;"	t	typeref:enum:__anon21
he_key	src/wal.h	/^    struct hash_elem he_key;$/;"	m	struct:wal_item	typeref:struct:wal_item::hash_elem
he_seq	src/wal.h	/^    struct hash_elem he_seq;$/;"	m	struct:wal_item	typeref:struct:wal_item::hash_elem
head	src/list.h	/^    struct list_elem *head;$/;"	m	struct:list	typeref:struct:list::list_elem
header	src/filemgr.h	/^    struct filemgr_header header;$/;"	m	struct:filemgr	typeref:struct:filemgr::filemgr_header
header_position	couchstore_api/couch_common.h	/^        cs_off_t header_position;   \/**< File offset of current header *\/$/;"	m	struct:__anon2
height	src/btree.h	/^    uint16_t height;$/;"	m	struct:btree
id	couchstore_api/couch_common.h	/^        sized_buf id;               \/**< Document ID (key) *\/$/;"	m	struct:_docinfo
id	couchstore_api/couch_common.h	/^        sized_buf id;$/;"	m	struct:_doc
id	couchstore_api/couch_common.h	/^        sized_buf id;$/;"	m	struct:_local_doc
idx	src/btree.h	/^    idx_t *idx;$/;"	m	struct:btree_iterator
idx_t	src/btree.h	/^    typedef uint16_t idx_t;$/;"	t
idx_t	src/btree.h	/^    typedef uint32_t idx_t;$/;"	t
incomplete_block_test	tests/forestdb_test.c	/^void incomplete_block_test()$/;"	f
iniparser_add_entry	utils/iniparser.c	/^static void iniparser_add_entry($/;"	f	file:
iniparser_dump	utils/iniparser.c	/^void iniparser_dump(dictionary * d, FILE * f)$/;"	f
iniparser_dump_ini	utils/iniparser.c	/^void iniparser_dump_ini(dictionary * d, FILE * f)$/;"	f
iniparser_find_entry	utils/iniparser.c	/^int iniparser_find_entry($/;"	f
iniparser_free	utils/iniparser.c	/^void iniparser_free(dictionary * d)$/;"	f
iniparser_getboolean	utils/iniparser.c	/^int iniparser_getboolean(dictionary * d, char * key, int notfound)$/;"	f
iniparser_getdouble	utils/iniparser.c	/^double iniparser_getdouble(dictionary * d, char * key, double notfound)$/;"	f
iniparser_getint	utils/iniparser.c	/^int iniparser_getint(dictionary * d, char * key, int notfound)$/;"	f
iniparser_getnsec	utils/iniparser.c	/^int iniparser_getnsec(dictionary * d)$/;"	f
iniparser_getsecname	utils/iniparser.c	/^char * iniparser_getsecname(dictionary * d, int n)$/;"	f
iniparser_getstr	utils/iniparser.c	/^char * iniparser_getstr(dictionary * d, char * key)$/;"	f
iniparser_getstring	utils/iniparser.c	/^char * iniparser_getstring(dictionary * d, char * key, char * def)$/;"	f
iniparser_new	utils/iniparser.c	/^dictionary * iniparser_new(char *ininame)$/;"	f
iniparser_setstr	utils/iniparser.c	/^int iniparser_setstr(dictionary * ini, char * entry, char * val)$/;"	f
iniparser_unset	utils/iniparser.c	/^void iniparser_unset(dictionary * ini, char * entry)$/;"	f
init_kv_var	src/btree.h	/^    void (*init_kv_var)(struct btree *tree, void *key, void *value);$/;"	m	struct:btree_kv_ops
initial_lock	src/filemgr.c	/^static spin_t initial_lock = SPIN_INITIALIZER;$/;"	v	file:
initial_lock	src/mempool.c	/^static spin_t initial_lock = SPIN_INITIALIZER;$/;"	v	file:
initial_space	src/mempool.c	/^static uint64_t initial_space[10] = {$/;"	v	file:
ins_kv	src/btree.h	/^    void (*ins_kv)(struct bnode *node, idx_t idx, void *key, void *value);$/;"	m	struct:btree_kv_ops
insert_test	tests/list_test.c	/^void insert_test()$/;"	f
item	src/blockcache.c	/^    struct bcache_item *item;$/;"	m	struct:dirty_item	typeref:struct:dirty_item::bcache_item	file:
item	tests/hash_test.c	/^struct item {$/;"	s	file:
iterator_test	tests/btreeblock_test.c	/^void iterator_test()$/;"	f
iterator_test	tests/forestdb_test.c	/^void iterator_test()$/;"	f
iterator_wal_entry	src/iterator.c	/^struct iterator_wal_entry{$/;"	s	file:
json	couchstore_api/couch_common.h	/^        sized_buf json;$/;"	m	struct:_local_doc
key	include/forestdb.h	/^    void *key;$/;"	m	struct:fdb_doc_struct
key	src/btree.c	/^    void *key;$/;"	m	struct:kv_ins_item	file:
key	src/docio.h	/^    void *key;$/;"	m	struct:docio_object
key	src/iterator.c	/^    void *key;$/;"	m	struct:iterator_wal_entry	file:
key	src/wal.h	/^    void *key;$/;"	m	struct:wal_item
key	utils/iniparser.h	/^	char **key ;$/;"	m	struct:_dictionary_
keylen	couchstore_api/couchstore_bench.c	/^    struct rndinfo keylen;$/;"	m	struct:bench_info	typeref:struct:bench_info::rndinfo	file:
keylen	include/forestdb.h	/^    size_t keylen;$/;"	m	struct:fdb_doc_struct
keylen	src/docio.h	/^    keylen_t keylen;$/;"	m	struct:docio_length
keylen	src/hbtrie.h	/^    size_t keylen;$/;"	m	struct:hbtrie_iterator
keylen	src/iterator.c	/^    uint16_t keylen;$/;"	m	struct:iterator_wal_entry	file:
keylen	src/wal.h	/^    uint16_t keylen;$/;"	m	struct:wal_item
keylen_t	src/docio.h	/^typedef uint16_t keylen_t;$/;"	t
ksize	src/btree.h	/^    uint8_t ksize;$/;"	m	struct:btree
kv_ins_item	src/btree.c	/^struct kv_ins_item {$/;"	s	file:
kv_ops	src/btree.h	/^    struct btree_kv_ops *kv_ops;$/;"	m	struct:btree	typeref:struct:btree::btree_kv_ops
kv_ops_ku32_vu64	src/btree_kv.c	/^static struct btree_kv_ops kv_ops_ku32_vu64 = {$/;"	v	typeref:struct:btree_kv_ops	file:
kv_ops_ku64_vu64	src/btree_kv.c	/^static struct btree_kv_ops kv_ops_ku64_vu64 = {$/;"	v	typeref:struct:btree_kv_ops	file:
kvsize	src/btree.h	/^    uint8_t kvsize;$/;"	m	struct:bnode
l1cache_linesize	src/mempool.c	/^static int l1cache_linesize;$/;"	v	file:
large_test	tests/hbtrie_test.c	/^void large_test()$/;"	f
last_commit	src/filemgr.h	/^    uint64_t last_commit;$/;"	m	struct:filemgr
last_commit	src/wal.h	/^    struct list_elem *last_commit;$/;"	m	struct:wal	typeref:struct:wal::list_elem
last_header_bid	include/forestdb.h	/^    uint64_t last_header_bid;$/;"	m	struct:__anon12
last_sequence	couchstore_api/couch_common.h	/^        uint64_t last_sequence;     \/**< Last sequence number allocated *\/$/;"	m	struct:__anon2
lastbid	src/docio.h	/^    bid_t lastbid;$/;"	m	struct:docio_handle
lastbid	src/filemgr.h	/^    bid_t lastbid;$/;"	m	struct:filemgr_buffer
le	src/blockcache.c	/^    struct list_elem le;    \/\/ offset -96$/;"	m	struct:fnamedic_item	typeref:struct:fnamedic_item::list_elem	file:
le	src/btree.c	/^    struct list_elem le;$/;"	m	struct:kv_ins_item	typeref:struct:kv_ins_item::list_elem	file:
le	src/btreeblock.c	/^    struct list_elem le;$/;"	m	struct:btreeblk_addr	typeref:struct:btreeblk_addr::list_elem	file:
le	src/btreeblock.c	/^    struct list_elem le;$/;"	m	struct:btreeblk_block	typeref:struct:btreeblk_block::list_elem	file:
le	src/filemgr.c	/^    struct list_elem le;$/;"	m	struct:temp_buf_item	typeref:struct:temp_buf_item::list_elem	file:
le	src/hbtrie.c	/^    struct list_elem le;$/;"	m	struct:btreeit_item	typeref:struct:btreeit_item::list_elem	file:
le	src/mempool.c	/^    struct list_elem le;$/;"	m	struct:mempool_item	typeref:struct:mempool_item::list_elem	file:
leafsize	src/btree.h	/^    uint16_t leafsize;$/;"	m	struct:btree
length	src/docio.h	/^    struct docio_length length;$/;"	m	struct:docio_object	typeref:struct:docio_object::docio_length
level	src/btree.h	/^    uint16_t level;$/;"	m	struct:bnode
line	utils/memleak.c	/^    size_t line;$/;"	m	struct:memleak_item	file:
linux_ops	src/filemgr_ops_linux.c	/^struct filemgr_ops linux_ops = {$/;"	v	typeref:struct:filemgr_ops
list	src/list.h	/^struct list {$/;"	s
list	src/mempool.c	/^    struct list list;$/;"	m	struct:mempool_list_set	typeref:struct:mempool_list_set::list	file:
list	src/wal.h	/^    struct list list;$/;"	m	struct:wal	typeref:struct:wal::list
list_begin	src/list.c	/^struct list_elem *list_begin(struct list *list)$/;"	f
list_elem	src/blockcache.c	/^    struct list_elem list_elem;     \/\/ offset -48$/;"	m	struct:bcache_item	typeref:struct:bcache_item::list_elem	file:
list_elem	src/list.h	/^struct list_elem {$/;"	s
list_elem	src/wal.h	/^    struct list_elem list_elem;$/;"	m	struct:wal_item	typeref:struct:wal_item::list_elem
list_end	src/list.c	/^struct list_elem *list_end(struct list *list)$/;"	f
list_init	src/list.c	/^void list_init(struct list *list)$/;"	f
list_insert_after	src/list.c	/^void list_insert_after(struct list *list, struct list_elem *after, struct list_elem *e)$/;"	f
list_insert_before	src/list.c	/^void list_insert_before(struct list *list, struct list_elem *before, struct list_elem *e)$/;"	f
list_next	src/list.c	/^struct list_elem *list_next(struct list_elem *e)$/;"	f
list_pop_back	src/list.c	/^struct list_elem *list_pop_back(struct list *list)$/;"	f
list_pop_front	src/list.c	/^struct list_elem *list_pop_front(struct list *list)$/;"	f
list_prev	src/list.c	/^struct list_elem *list_prev(struct list_elem *e)$/;"	f
list_push_back	src/list.c	/^void list_push_back(struct list *list, struct list_elem *e)$/;"	f
list_push_front	src/list.c	/^void list_push_front(struct list *list, struct list_elem *e)$/;"	f
list_remove	src/list.c	/^struct list_elem *list_remove(struct list *list, struct list_elem *e)$/;"	f
list_remove_reverse	src/list.c	/^struct list_elem *list_remove_reverse(struct list *list, struct list_elem *e)$/;"	f
listset	src/mempool.c	/^    struct mempool_list_set *listset;$/;"	m	struct:mempool_item	typeref:struct:mempool_item::mempool_list_set	file:
listset	src/mempool.c	/^    struct mempool_list_set listset[N_LISTS];$/;"	m	struct:mempool_bucket	typeref:struct:mempool_bucket::mempool_list_set	file:
lock	src/blockcache.c	/^    spin_t lock;$/;"	m	struct:bcache_item	file:
lock	src/blockcache.c	/^    spin_t lock;$/;"	m	struct:fnamedic_item	file:
lock	src/filemgr.h	/^    spin_t lock;$/;"	m	struct:filemgr
lock	src/list.h	/^    spin_t lock;$/;"	m	struct:list
lock	src/mempool.c	/^    spin_t lock;$/;"	m	struct:mempool_bucket	file:
lock	src/mempool.c	/^    spin_t lock;$/;"	m	struct:mempool_list_set	file:
lock	src/wal.h	/^    spin_t lock;$/;"	m	struct:wal
lock	utils/memleak.c	/^static spin_t lock = SPIN_INITIALIZER;$/;"	v	file:
locks	src/hash.h	/^    spin_t *locks;$/;"	m	struct:hash
main	couchstore_api/couchstore_bench.c	/^int main(){$/;"	f
main	tests/bcache_test.c	/^int main()$/;"	f
main	tests/btree_test.c	/^int main(){$/;"	f
main	tests/btreeblock_test.c	/^int main()$/;"	f
main	tests/crc_test.c	/^int main()$/;"	f
main	tests/docio_test.c	/^int main()$/;"	f
main	tests/filemgr_test.c	/^int main()$/;"	f
main	tests/forestdb_test.c	/^int main(){$/;"	f
main	tests/hash_test.c	/^int main()$/;"	f
main	tests/hbtrie_test.c	/^int main(){$/;"	f
main	tests/list_test.c	/^int main(){$/;"	f
main	tests/mempool_test.c	/^int main()$/;"	f
malloc	utils/memleak.h	/^    #define malloc(/;"	d
mem_double	utils/iniparser.c	/^static void * mem_double(void * ptr, int size)$/;"	f	file:
memleak_alloc	utils/memleak.c	/^void * memleak_alloc(size_t size, char *file, size_t line)$/;"	f
memleak_calloc	utils/memleak.c	/^void * memleak_calloc(size_t nmemb, size_t size, char *file, size_t line)$/;"	f
memleak_cmp	utils/memleak.c	/^int memleak_cmp(struct rb_node *a, struct rb_node *b, void *aux)$/;"	f
memleak_end	utils/memleak.c	/^void memleak_end()$/;"	f
memleak_free	utils/memleak.c	/^void memleak_free(void *addr, char *file, size_t line)$/;"	f
memleak_item	utils/memleak.c	/^struct memleak_item {$/;"	s	file:
memleak_posix_memalign	utils/memleak.c	/^int memleak_posix_memalign(void **memptr, size_t alignment, size_t size, char *file, size_t line)$/;"	f
memleak_realloc	utils/memleak.c	/^void *memleak_realloc(void *ptr, size_t size)$/;"	f
memleak_start	utils/memleak.c	/^void memleak_start()$/;"	f
mempool_alloc	src/common.h	/^    #define mempool_alloc(/;"	d
mempool_alloc	src/mempool.c	/^void * mempool_alloc(size_t size)$/;"	f
mempool_bucket	src/mempool.c	/^struct mempool_bucket {$/;"	s	file:
mempool_free	src/common.h	/^    #define mempool_free(/;"	d
mempool_free	src/mempool.c	/^void mempool_free(void *addr)$/;"	f
mempool_init	src/mempool.c	/^void mempool_init()$/;"	f
mempool_initialized	src/mempool.c	/^static int mempool_initialized = 0;$/;"	v	file:
mempool_item	src/mempool.c	/^struct mempool_item {$/;"	s	file:
mempool_list_set	src/mempool.c	/^struct mempool_list_set {$/;"	s	file:
mempool_shutdown	src/mempool.c	/^void mempool_shutdown()$/;"	f
meta	include/forestdb.h	/^    void *meta;$/;"	m	struct:fdb_doc_struct
meta	src/docio.h	/^    void *meta;$/;"	m	struct:docio_object
metabuf	couchstore_api/couchstore_bench.c	/^static uint8_t metabuf[256];$/;"	v	file:
metadata_test	tests/btree_test.c	/^void metadata_test()$/;"	f
metalen	include/forestdb.h	/^    size_t metalen;$/;"	m	struct:fdb_doc_struct
metalen	src/docio.h	/^    uint16_t metalen;$/;"	m	struct:docio_length
metasize_t	src/btree.h	/^typedef uint16_t metasize_t;$/;"	t
mt_init_test	tests/filemgr_test.c	/^void mt_init_test()$/;"	f
multi_thread_test	tests/bcache_test.c	/^void multi_thread_test($/;"	f
multi_thread_test	tests/forestdb_test.c	/^void multi_thread_test($/;"	f
multi_version_test	tests/forestdb_test.c	/^void multi_version_test()$/;"	f
mutex	src/filemgr.h	/^    mutex_t mutex;$/;"	m	struct:filemgr
mutex_init	src/arch.h	/^        #define mutex_init(/;"	d
mutex_lock	src/arch.h	/^        #define mutex_lock(/;"	d
mutex_t	src/arch.h	/^        #define mutex_t /;"	d
mutex_unlock	src/arch.h	/^        #define mutex_unlock(/;"	d
n	couchstore_api/couchstore_bench.c	/^    int n;$/;"	m	struct:pop_thread_args	file:
n	tests/bcache_test.c	/^    size_t n;$/;"	m	struct:worker_args	file:
n	utils/iniparser.h	/^	int n;$/;"	m	struct:_dictionary_
nbatch	tests/forestdb_test.c	/^    size_t nbatch;$/;"	m	struct:work_thread_args	file:
nbatches	couchstore_api/couchstore_bench.c	/^    size_t nbatches;$/;"	m	struct:bench_info	file:
nblocks	tests/bcache_test.c	/^    size_t nblocks;$/;"	m	struct:worker_args	file:
nbuckets	src/hash.h	/^    size_t nbuckets;$/;"	m	struct:hash
ncacheblock	src/filemgr.h	/^    int ncacheblock;$/;"	m	struct:filemgr_config
ndocs	couchstore_api/couchstore_bench.c	/^    size_t ndocs;$/;"	m	struct:bench_info	file:
ndocs	include/forestdb.h	/^    uint64_t ndocs;$/;"	m	struct:__anon12
ndocs	tests/forestdb_test.c	/^    size_t ndocs;$/;"	m	struct:work_thread_args	file:
nentry	src/btree.h	/^    idx_t nentry;$/;"	m	struct:bnode
new_file	src/filemgr.h	/^    struct filemgr *new_file;$/;"	m	struct:filemgr	typeref:struct:filemgr::filemgr
next	src/list.h	/^    struct list_elem *next;$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
nfiles	couchstore_api/couchstore_bench.c	/^    size_t nfiles;$/;"	m	struct:bench_info	file:
nnodeperblock	src/btreeblock.h	/^    uint16_t nnodeperblock;$/;"	m	struct:btreeblk_handle
node	src/btree.h	/^    struct bnode **node;$/;"	m	struct:btree_iterator	typeref:struct:btree_iterator::bnode
nodesize	src/btreeblock.h	/^    uint32_t nodesize;$/;"	m	struct:btreeblk_handle
nops	couchstore_api/couchstore_bench.c	/^    size_t nops;$/;"	m	struct:bench_info	file:
nthreads	couchstore_api/couchstore_bench.c	/^    size_t nthreads;$/;"	m	struct:bench_info	file:
offset	src/iterator.c	/^    uint64_t offset;$/;"	m	struct:iterator_wal_entry	file:
offset	src/wal.h	/^    uint64_t offset;$/;"	m	struct:wal_item
offsetsize	include/forestdb.h	/^    uint16_t offsetsize;$/;"	m	struct:__anon11
op_dist	couchstore_api/couchstore_bench.c	/^    struct rndinfo op_dist;$/;"	m	struct:bench_info	typeref:struct:bench_info::rndinfo	file:
open	include/libcouchstore/file_ops.h	/^        couchstore_error_t (*open)(couch_file_handle* handle, const char *path, int oflag);$/;"	m	struct:__anon16
open	src/filemgr.h	/^    int (*open)(const char *pathname, int flags, mode_t mode);$/;"	m	struct:filemgr_ops
ops	src/filemgr.h	/^    struct filemgr_ops *ops;$/;"	m	struct:filemgr	typeref:struct:filemgr::filemgr_ops
opt	include/forestdb.h	/^    fdb_iterator_opt_t opt;$/;"	m	struct:__anon14
options	couchstore_api/couchstore_api_leveldb.c	/^    leveldb_options_t *options;$/;"	m	struct:_db	file:
pop_batchsize	couchstore_api/couchstore_bench.c	/^    size_t pop_batchsize;$/;"	m	struct:bench_info	file:
pop_commit	couchstore_api/couchstore_bench.c	/^    uint8_t pop_commit;$/;"	m	struct:bench_info	file:
pop_thread	couchstore_api/couchstore_bench.c	/^void * pop_thread(void *voidargs)$/;"	f
pop_thread_args	couchstore_api/couchstore_bench.c	/^struct pop_thread_args {$/;"	s	file:
population	couchstore_api/couchstore_bench.c	/^void population(Db **db, struct bench_info *binfo)$/;"	f
pos	src/btreeblock.c	/^    uint32_t pos;$/;"	m	struct:btreeblk_block	file:
pos	src/filemgr.h	/^    uint64_t pos;$/;"	m	struct:filemgr
posix_memalign	utils/memleak.h	/^    #define posix_memalign(/;"	d
pread	include/libcouchstore/file_ops.h	/^        ssize_t (*pread)(couch_file_handle handle, void *buf, size_t nbytes, cs_off_t offset);$/;"	m	struct:__anon16
pread	src/filemgr.h	/^    int (*pread)(int fd, void *buf, size_t count, off_t offset);$/;"	m	struct:filemgr_ops
prefix	src/hbtrie.c	/^    void *prefix;$/;"	m	struct:hbtrie_meta	file:
prev	src/list.h	/^    struct list_elem *prev;$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
print_btree	tests/btree_test.c	/^void print_btree(struct btree *btree, void *key, void *value)$/;"	f
print_btree	tests/btreeblock_test.c	/^void print_btree(struct btree *btree, void *key, void *value)$/;"	f
print_filesize	couchstore_api/couchstore_bench.c	/^void print_filesize(char *filename)$/;"	f
print_filesize_approx	couchstore_api/couchstore_bench.c	/^char * print_filesize_approx(uint64_t size, char *output)$/;"	f
print_proc_io_stat	couchstore_api/couchstore_bench.c	/^uint64_t print_proc_io_stat(char *buf)$/;"	f
pwrite	include/libcouchstore/file_ops.h	/^        ssize_t (*pwrite)(couch_file_handle handle, const void *buf, size_t nbytes, cs_off_t offset);$/;"	m	struct:__anon16
pwrite	src/filemgr.h	/^    int (*pwrite)(int fd, void *buf, size_t count, off_t offset);$/;"	m	struct:filemgr_ops
random	src/common.h	/^#define random(/;"	d
random_custom	src/common.h	/^#define random_custom(/;"	d
random_custom	src/mempool.c	/^#define random_custom(/;"	d	file:
random_custom	tests/mempool_test.c	/^#define random_custom(/;"	d	file:
randomize	src/common.h	/^#define randomize(/;"	d
range_test	tests/btreeblock_test.c	/^void range_test()$/;"	f
rb	src/blockcache.c	/^    struct rb_node rb;$/;"	m	struct:dirty_item	typeref:struct:dirty_item::rb_node	file:
rb	src/iterator.c	/^    struct rb_node rb;$/;"	m	struct:iterator_wal_entry	typeref:struct:iterator_wal_entry::rb_node	file:
rb	utils/memleak.c	/^    struct rb_node rb;$/;"	m	struct:memleak_item	typeref:struct:memleak_item::rb_node	file:
rb_augment_erase_begin	src/rbtree.c	/^struct rb_node *rb_augment_erase_begin(struct rb_node *node)$/;"	f
rb_augment_erase_end	src/rbtree.c	/^void rb_augment_erase_end(struct rb_node *node, rb_augment_f func, void *data)$/;"	f
rb_augment_f	src/rbtree.h	/^typedef void (*rb_augment_f)(struct rb_node *node, void *data);$/;"	t
rb_augment_insert	src/rbtree.c	/^void rb_augment_insert(struct rb_node *node, rb_augment_f func, void *data)$/;"	f
rb_augment_path	src/rbtree.c	/^static void rb_augment_path(struct rb_node *node, rb_augment_f func, void *data)$/;"	f	file:
rb_cmp	src/hash.h	/^        rbwrap_cmp_func *rb_cmp;$/;"	m	struct:hash
rb_color	src/rbtree.h	/^#define rb_color(/;"	d
rb_cursor	include/forestdb.h	/^    struct rb_node *rb_cursor;$/;"	m	struct:__anon14	typeref:struct:__anon14::rb_node
rb_entry	src/rbtree.h	/^#define	rb_entry(/;"	d
rb_erase	src/rbtree.c	/^void rb_erase(struct rb_node *node, struct rb_root *root)$/;"	f
rb_first	src/rbtree.c	/^struct rb_node *rb_first(const struct rb_root *root)$/;"	f
rb_init_node	src/rbtree.h	/^static inline void rb_init_node(struct rb_node *rb)$/;"	f
rb_insert_color	src/rbtree.c	/^void rb_insert_color(struct rb_node *node, struct rb_root *root)$/;"	f
rb_is_black	src/rbtree.h	/^#define rb_is_black(/;"	d
rb_is_red	src/rbtree.h	/^#define rb_is_red(/;"	d
rb_last	src/rbtree.c	/^struct rb_node *rb_last(const struct rb_root *root)$/;"	f
rb_left	src/rbtree.h	/^	struct rb_node *rb_left;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_link_node	src/rbtree.h	/^static inline void rb_link_node(struct rb_node * node, struct rb_node * parent,$/;"	f
rb_next	src/rbtree.c	/^struct rb_node *rb_next(const struct rb_node *node)$/;"	f
rb_node	src/hash.h	/^        struct rb_node rb_node;$/;"	m	struct:hash_elem	typeref:struct:hash_elem::rb_node
rb_node	src/rbtree.h	/^	struct rb_node *rb_node;$/;"	m	struct:rb_root	typeref:struct:rb_root::rb_node
rb_node	src/rbtree.h	/^struct rb_node$/;"	s
rb_parent	src/rbtree.h	/^#define rb_parent(/;"	d
rb_parent_color	src/rbtree.h	/^	unsigned long  rb_parent_color;$/;"	m	struct:rb_node
rb_prev	src/rbtree.c	/^struct rb_node *rb_prev(const struct rb_node *node)$/;"	f
rb_replace_node	src/rbtree.c	/^void rb_replace_node(struct rb_node *victim, struct rb_node *new,$/;"	f
rb_right	src/rbtree.h	/^	struct rb_node *rb_right;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_root	src/rbtree.h	/^struct rb_root$/;"	s
rb_root_init	src/rbtree.h	/^static inline void rb_root_init(struct rb_root *root, struct rb_node *node)$/;"	f
rb_set_black	src/rbtree.h	/^#define rb_set_black(/;"	d
rb_set_color	src/rbtree.h	/^static inline void rb_set_color(struct rb_node *rb, int color)$/;"	f
rb_set_parent	src/rbtree.h	/^static inline void rb_set_parent(struct rb_node *rb, struct rb_node *p)$/;"	f
rb_set_red	src/rbtree.h	/^#define rb_set_red(/;"	d
rbatchsize	couchstore_api/couchstore_bench.c	/^    struct rndinfo rbatchsize;$/;"	m	struct:bench_info	typeref:struct:bench_info::rndinfo	file:
rbtree	src/blockcache.c	/^    struct rb_root rbtree;$/;"	m	struct:fnamedic_item	typeref:struct:fnamedic_item::rb_root	file:
rbtree	utils/memleak.c	/^static struct rb_root rbtree;$/;"	v	typeref:struct:rb_root	file:
rbwrap_cmp_func	src/rbwrap.h	/^typedef int rbwrap_cmp_func (struct rb_node *a, struct rb_node *b, void *aux);$/;"	t
rbwrap_init	src/rbwrap.c	/^void rbwrap_init(struct rb_root *root, void *aux)$/;"	f
rbwrap_insert	src/rbwrap.c	/^struct rb_node * rbwrap_insert(struct rb_root *root, struct rb_node *node, rbwrap_cmp_func *func)$/;"	f
rbwrap_search	src/rbwrap.c	/^struct rb_node * rbwrap_search(struct rb_root *root, struct rb_node *node, rbwrap_cmp_func *func)$/;"	f
read_list	src/btreeblock.h	/^    struct list read_list;$/;"	m	struct:btreeblk_handle	typeref:struct:btreeblk_handle::list
read_options	couchstore_api/couchstore_api_leveldb.c	/^    leveldb_readoptions_t *read_options;$/;"	m	struct:_db	file:
read_query_byseq	couchstore_api/couchstore_bench.c	/^    uint8_t read_query_byseq;$/;"	m	struct:bench_info	file:
readbuffer	src/docio.h	/^    void *readbuffer;$/;"	m	struct:docio_handle
readkey	src/hbtrie.h	/^    hbtrie_func_readkey *readkey;$/;"	m	struct:hbtrie
realloc	utils/memleak.h	/^    #define realloc(/;"	d
recycle_bin	src/btreeblock.h	/^    struct list recycle_bin;$/;"	m	struct:btreeblk_handle	typeref:struct:btreeblk_handle::list
ref_count	src/filemgr.h	/^    uint8_t ref_count;$/;"	m	struct:filemgr
remove_test	tests/btree_test.c	/^void remove_test()$/;"	f
rev_meta	couchstore_api/couch_common.h	/^        sized_buf rev_meta;         \/**< Revision metadata; uninterpreted by CouchStore.$/;"	m	struct:_docinfo
rev_seq	couchstore_api/couch_common.h	/^        uint64_t rev_seq;           \/**< Revision number of document *\/$/;"	m	struct:_docinfo
revnum	src/filemgr.h	/^    filemgr_header_revnum_t revnum;$/;"	m	struct:filemgr_header
rndinfo	utils/adv_random.h	/^struct rndinfo{$/;"	s
rndtype_t	utils/adv_random.h	/^} rndtype_t;$/;"	t	typeref:enum:__anon25
root_bid	src/btree.h	/^    bid_t root_bid;$/;"	m	struct:btree
root_bid	src/hbtrie.h	/^    bid_t root_bid;$/;"	m	struct:hbtrie
root_flag	src/btree.h	/^    bnode_flag_t root_flag;$/;"	m	struct:btree
rvalue	src/mempool.c	/^    uint32_t rvalue;$/;"	m	struct:mempool_bucket	file:
seq_memcpy	src/common.h	/^#define seq_memcpy(/;"	d
seqnum	include/forestdb.h	/^    fdb_seqnum_t seqnum;$/;"	m	struct:__anon12
seqnum	include/forestdb.h	/^    fdb_seqnum_t seqnum;$/;"	m	struct:fdb_doc_struct
seqnum	src/docio.h	/^        fdb_seqnum_t seqnum;$/;"	m	struct:docio_object
seqnum	src/wal.h	/^    fdb_seqnum_t seqnum;$/;"	m	struct:wal_item
seqtree	include/forestdb.h	/^    struct btree *seqtree;$/;"	m	struct:__anon12	typeref:struct:__anon12::btree
seqtree_opt	include/forestdb.h	/^    fdb_seqtree_opt_t seqtree_opt;$/;"	m	struct:__anon11
seqtree_test	tests/btree_test.c	/^void seqtree_test()$/;"	f
set_key	src/btree.h	/^    void (*set_key)(struct btree *tree, void *dst, void *src);$/;"	m	struct:btree_kv_ops
set_kv	src/btree.h	/^    void (*set_kv)(struct bnode *node, idx_t idx, void *key, void *value);$/;"	m	struct:btree_kv_ops
set_value	src/btree.h	/^    void (*set_value)(struct btree *tree, void *dst, void *src);$/;"	m	struct:btree_kv_ops
size	couchstore_api/couch_common.h	/^        size_t size;                \/**< Data size in bytes *\/$/;"	m	struct:_docinfo
size	couchstore_api/couch_common.h	/^        size_t size;$/;"	m	struct:_sized_buf
size	src/btree.h	/^    metasize_t size;$/;"	m	struct:btree_meta
size	src/filemgr.h	/^    filemgr_header_len_t size;$/;"	m	struct:filemgr_header
size	src/mempool.c	/^    uint32_t size;$/;"	m	struct:mempool_bucket	file:
size	src/wal.h	/^    size_t size;$/;"	m	struct:wal
size	utils/iniparser.h	/^	int size;$/;"	m	struct:_dictionary_
size	utils/memleak.c	/^    size_t size;$/;"	m	struct:memleak_item	file:
sized_buf	couchstore_api/couch_common.h	/^    } sized_buf;$/;"	t	typeref:struct:_sized_buf
space_used	couchstore_api/couch_common.h	/^        uint64_t space_used;        \/**< Disk space actively used by docs *\/$/;"	m	struct:__anon2
speed_test	tests/mempool_test.c	/^void speed_test()$/;"	f
spin_lock	src/arch.h	/^        #define spin_lock(/;"	d
spin_t	src/arch.h	/^        #define spin_t /;"	d
spin_unlock	src/arch.h	/^        #define spin_unlock(/;"	d
split_test	tests/btree_test.c	/^void split_test()$/;"	f
start	utils/stopwatch.h	/^    struct timeval start;$/;"	m	struct:stopwatch	typeref:struct:stopwatch::timeval
start_sw	utils/memleak.c	/^static uint8_t start_sw = 0;$/;"	v	file:
status	src/filemgr.h	/^    file_status_t status;$/;"	m	struct:filemgr
stopwatch	utils/stopwatch.h	/^struct stopwatch {$/;"	s
stopwatch_check_ms	utils/stopwatch.c	/^int stopwatch_check_ms(struct stopwatch *sw, size_t ms)$/;"	f
stopwatch_check_us	utils/stopwatch.c	/^int stopwatch_check_us(struct stopwatch *sw, size_t us)$/;"	f
stopwatch_init	utils/stopwatch.c	/^void stopwatch_init(struct stopwatch *sw)$/;"	f
stopwatch_start	utils/stopwatch.c	/^void stopwatch_start(struct stopwatch *sw)$/;"	f
stopwatch_stop	utils/stopwatch.c	/^struct timeval stopwatch_stop(struct stopwatch *sw)$/;"	f
strcrop	utils/iniparser.c	/^static char * strcrop(char * s)$/;"	f	file:
string_hash_test	tests/hash_test.c	/^void string_hash_test()$/;"	f
strlwc	utils/iniparser.c	/^static char * strlwc(char * s)$/;"	f	file:
strskp	utils/iniparser.c	/^static char * strskp(char * s)$/;"	f	file:
sync	include/libcouchstore/file_ops.h	/^        couchstore_error_t (*sync)(couch_file_handle handle);$/;"	m	struct:__anon16
sync	src/filemgr.h	/^    uint8_t sync;$/;"	m	struct:filemgr
tail	src/list.h	/^    struct list_elem *tail;$/;"	m	struct:list	typeref:struct:list::list_elem
temp_buf	src/filemgr.c	/^static struct list temp_buf;$/;"	v	typeref:struct:list	file:
temp_buf_item	src/filemgr.c	/^struct temp_buf_item{$/;"	s	file:
temp_buf_lock	src/filemgr.c	/^static spin_t temp_buf_lock;$/;"	v	file:
test_struct	tests/mempool_test.c	/^struct test_struct {$/;"	s	file:
tid	tests/forestdb_test.c	/^    int tid;$/;"	m	struct:work_thread_args	file:
time_sec	tests/bcache_test.c	/^    size_t time_sec;$/;"	m	struct:worker_args	file:
time_sec	tests/forestdb_test.c	/^    size_t time_sec;$/;"	m	struct:work_thread_args	file:
trie	include/forestdb.h	/^    struct hbtrie *trie;$/;"	m	struct:__anon12	typeref:struct:__anon12::hbtrie
trie	src/hbtrie.h	/^    struct hbtrie trie;$/;"	m	struct:hbtrie_iterator	typeref:struct:hbtrie_iterator::hbtrie
two_btree_test	tests/btreeblock_test.c	/^void two_btree_test()$/;"	f
twohash_test	tests/hash_test.c	/^void twohash_test()$/;"	f
type	utils/adv_random.h	/^    rndtype_t type;$/;"	m	struct:rndinfo
val	tests/hash_test.c	/^    int val;$/;"	m	struct:item	file:
val	utils/iniparser.h	/^	char **val;$/;"	m	struct:_dictionary_
value	src/btree.c	/^    void *value;$/;"	m	struct:kv_ins_item	file:
value	src/hbtrie.c	/^    void *value;$/;"	m	struct:hbtrie_meta	file:
value2bid	src/btree.h	/^    bid_t (*value2bid)(void *value);$/;"	m	struct:btree_kv_ops
valuelen	src/hbtrie.h	/^    uint8_t valuelen;$/;"	m	struct:hbtrie
version	include/libcouchstore/file_ops.h	/^        uint64_t version;$/;"	m	struct:__anon16
voidref	src/btree.h	/^typedef void* voidref;$/;"	t
vsize	src/btree.h	/^    uint8_t vsize;$/;"	m	struct:btree
wal	src/filemgr.h	/^    struct wal *wal;$/;"	m	struct:filemgr	typeref:struct:filemgr::wal
wal	src/wal.h	/^struct wal {$/;"	s
wal_close	src/wal.c	/^wal_result wal_close(struct filemgr *file)$/;"	f
wal_commit	src/wal.c	/^wal_result wal_commit(struct filemgr *file)$/;"	f
wal_commit_test	tests/forestdb_test.c	/^void wal_commit_test()$/;"	f
wal_dirty	src/wal.h	/^    wal_dirty_t wal_dirty;$/;"	m	struct:wal
wal_dirty_t	src/wal.h	/^typedef uint8_t wal_dirty_t;$/;"	t
wal_find	src/wal.c	/^wal_result wal_find(struct filemgr *file, fdb_doc *doc, uint64_t *offset)$/;"	f
wal_flush	src/wal.c	/^wal_result wal_flush(struct filemgr *file, void *dbhandle, wal_flush_func *func)$/;"	f
wal_flush_func	src/wal.h	/^typedef void wal_flush_func(void *dbhandle, struct wal_item *item);$/;"	t
wal_get_datasize	src/wal.c	/^size_t wal_get_datasize(struct filemgr *file)$/;"	f
wal_get_dirty_status	src/wal.c	/^wal_dirty_t wal_get_dirty_status(struct filemgr *file)$/;"	f
wal_get_size	src/wal.c	/^size_t wal_get_size(struct filemgr *file)$/;"	f
wal_init	src/wal.c	/^wal_result wal_init(struct filemgr *file, int nbucket)$/;"	f
wal_insert	src/wal.c	/^wal_result wal_insert(struct filemgr *file, fdb_doc *doc, uint64_t offset, wal_item_action act)$/;"	f
wal_is_initialized	src/wal.c	/^int wal_is_initialized(struct filemgr *file)$/;"	f
wal_item	src/wal.h	/^struct wal_item{$/;"	s
wal_item_action	src/wal.h	/^typedef uint8_t wal_item_action;$/;"	t
wal_rb	include/forestdb.h	/^    struct rb_root *wal_rb;$/;"	m	struct:__anon14	typeref:struct:__anon14::rb_root
wal_remove	src/wal.c	/^wal_result wal_remove(struct filemgr *file, fdb_doc *doc)$/;"	f
wal_result	src/wal.h	/^} wal_result;$/;"	t	typeref:enum:__anon22
wal_set_dirty_status	src/wal.c	/^void wal_set_dirty_status(struct filemgr *file, wal_dirty_t status)$/;"	f
wal_shutdown	src/wal.c	/^wal_result wal_shutdown(struct filemgr *file)$/;"	f
wal_threshold	include/forestdb.h	/^    uint64_t wal_threshold;$/;"	m	struct:__anon11
wbatchsize	couchstore_api/couchstore_bench.c	/^    struct rndinfo wbatchsize;$/;"	m	struct:bench_info	typeref:struct:bench_info::rndinfo	file:
work_thread_args	tests/forestdb_test.c	/^struct work_thread_args{$/;"	s	file:
worker	tests/bcache_test.c	/^void * worker(void *voidargs)$/;"	f
worker_args	tests/bcache_test.c	/^struct worker_args{$/;"	s	file:
write_options	couchstore_api/couchstore_api_leveldb.c	/^    leveldb_writeoptions_t *write_options;$/;"	m	struct:_db	file:
write_prob	couchstore_api/couchstore_bench.c	/^    size_t write_prob;$/;"	m	struct:bench_info	file:
writer	tests/bcache_test.c	/^    size_t writer;$/;"	m	struct:worker_args	file:
writer	tests/forestdb_test.c	/^    size_t writer;$/;"	m	struct:work_thread_args	file:
